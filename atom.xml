<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Duc Ninja</title>
  
  <subtitle>I&#39;m an iOS engineer and a ninja as well.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://duc.ninja/"/>
  <updated>2019-09-28T02:53:12.644Z</updated>
  <id>https://duc.ninja/</id>
  
  <author>
    <name>Duc Ninja</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Using Codable to Make Enums With Associated Values Even More Powerful</title>
    <link href="https://duc.ninja/2019/05/262019/may-26-codable-enums-with-associated/"/>
    <id>https://duc.ninja/2019/05/262019/may-26-codable-enums-with-associated/</id>
    <published>2019-05-26T01:30:00.000Z</published>
    <updated>2019-09-28T02:53:12.644Z</updated>
    
    <content type="html"><![CDATA[<p>One of Swift’s greatest features, and one of my favorites, are enums with associated values. The language itself uses them for its fundamentals, like <code>Optional&lt;T&gt;</code>, which either has a <code>.some(T)</code> or is <code>.none</code>. Another example is the new since Swift 5 <code>Result&lt;T, E&gt;</code>, which either contains a <code>.success(T)</code> or a <code>.failure(E)</code> case. In this post, we will go over cases (no pun intended) where an enum is more suitable than a struct or class, and also learn how one can make enums with associated values conform to Codable, achieving a better and safer usage of these data representations when they need to be encoded and decoded. You can scroll to the end of the post to get the final playground.</p><p>Enums with associated values make sense when a type may hold only one value, instead of two or more optional values. A classic example for Result is a network operation, which might return either an error or an object. They never should be nil or not be nil simultaneously: when one is nil, the other should exist.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//in this case, the caller must check for nil for both values</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">issueRequest</span>&lt;T&gt;<span class="params">(<span class="number">_</span> request: URLRequest, completion: @escaping <span class="params">(T?, Error?)</span></span></span> -&gt; <span class="type">Void</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//here, however, it will be either .success or .failure</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">issueRequest</span>&lt;T&gt;<span class="params">(<span class="number">_</span> request: URLRequest, completion: @escaping <span class="params">(Result&lt;T, Error&gt;)</span></span></span> -&gt; <span class="type">Void</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><p>Now, let’s think of a more concrete example. Let’s imagine we have an app which allows users to confirm presence in some event, and the response from the server might have one out of three possibilites:</p><ul><li>The user is confirmed in the event, and a list of users going is also returned</li><li>The event is full and the user is at a specific position in the waitlist, and a list of users going is also returned</li><li>The user cannot go to the event for some reason (it is too late or there is no waitlist, for example)<br>The server returns a JSON encoded response, so these are the possibilities:<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//1 - user is confirmed:</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"status"</span>: <span class="string">"confirmed"</span>,</span><br><span class="line">  <span class="attr">"confirmedUsers"</span>: [</span><br><span class="line">    &#123;<span class="attr">"id"</span>: <span class="string">"abc"</span>, <span class="attr">"name"</span>: <span class="string">"Rachel"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">"id"</span>: <span class="string">"def"</span>, <span class="attr">"name"</span>: <span class="string">"John"</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//2 - user is in waitlist:</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"status"</span>: <span class="string">"waitlist"</span>,</span><br><span class="line">  <span class="attr">"position"</span>: <span class="number">12</span>,</span><br><span class="line">  <span class="attr">"confirmedUsers"</span>: [</span><br><span class="line">    &#123;<span class="attr">"id"</span>: <span class="string">"abc"</span>, <span class="attr">"name"</span>: <span class="string">"Rachel"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">"id"</span>: <span class="string">"def"</span>, <span class="attr">"name"</span>: <span class="string">"John"</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//3 - user cannot go for a different reason</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"status"</span>: <span class="string">"not allowed"</span>,</span><br><span class="line">  <span class="attr">"reason"</span>: <span class="string">"It is too late to confirm to this event."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>Now, in our client, we need to be able to represent this data and its possible values. If we would use a struct, it would probably look to something like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EventConfirmationResponse</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> status: <span class="type">String</span></span><br><span class="line">  <span class="keyword">let</span> confirmedUsers: [<span class="type">User</span>]?</span><br><span class="line">  <span class="keyword">let</span> position: <span class="type">Int?</span></span><br><span class="line">  <span class="keyword">let</span> reason: <span class="type">String?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Can you imagine yourself checking for all the the possible states this struct might have?</p><p>In addition to that, in this case a property being present is not enough to determine what is the status: confirmed is returned in both confirmed and waitlist states. Therefore, the status property must be checked in association with the optional values. And if the API get more possibilities, it gets even worse.</p><h3 id="Enums-with-associated-values-❤️"><a href="#Enums-with-associated-values-❤️" class="headerlink" title="Enums with associated values ❤️"></a>Enums with associated values ❤️</h3><p>We can do better. It would be much safer and predictable to use the following enum:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">EventConfirmationResponse</span> </span>&#123;</span><br><span class="line">  <span class="keyword">case</span> confirmed([<span class="type">User</span>]) <span class="comment">//Contains an array of users going to the event</span></span><br><span class="line">  <span class="keyword">case</span> waitlist(<span class="type">Int</span>, [<span class="type">User</span>]) <span class="comment">//Contains the position in the waitlist and</span></span><br><span class="line">  <span class="keyword">case</span> notAllowed(<span class="type">String</span>) <span class="comment">//Contains the reason why the user is not allowed</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Great! Now, whenever this response needs to be used for being displayed to the user, one can use a switch statement to check each case and extract the associated values:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> confirmationResponse &#123;</span><br><span class="line">  <span class="keyword">case</span> .confirmed(<span class="keyword">let</span> users):</span><br><span class="line">    <span class="keyword">let</span> confirmedEventVC = <span class="type">ConfirmedEventViewController</span>(event: event, confirmed: users)</span><br><span class="line">    present(confirmedEventVC, animated: <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">case</span> .waitlist(<span class="keyword">let</span> position, <span class="keyword">let</span> users):</span><br><span class="line">    <span class="keyword">let</span> eventWaitlistVC = <span class="type">EventWaitlistViewController</span>(event: event, position: position, confirmed: users)</span><br><span class="line">    present(eventWaitlistVC, animated: <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">case</span> .notAllowed(<span class="keyword">let</span> reason):</span><br><span class="line">    presentNotAllowedAlert(with: reason)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This looks much better. Now, we want to provide the EventConfirmationResponse enum to our HTTP client, so it can convert the JSON response directly into the enum: we want it to be Decodable, which has a great advantage: we hand over the different possibilites to the JSONDecoder, and if there is any field missing or incompatible with what we described above, the decoding fails. Failing early, in the decoding stage, is better than failing at a UI display stage. Also, it’s worth noting, if the server is also being written in Swift (e.g., with Vapor), we can make it conform to Encodable, and JSONEncoder will take care of converting it exactly into the expected response.</p><p>Encodable &amp; Decodable is the exact definition of Codable. If we add it to our enum and try to compile, we will get the following error:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">EventConfirmationResponse</span>: <span class="title">Codable</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//type 'EventConfirmationResponse' does not conform to protocol 'Decodable'</span></span><br><span class="line"><span class="comment">//protocol requires initializer 'init(from:)' with type '(from: Decoder)'</span></span><br><span class="line"><span class="comment">//type 'EventConfirmationResponse' does not conform to protocol 'Codable'</span></span><br><span class="line"><span class="comment">//protocol requires function 'encode(to:)' with type '(Encoder) throws -&gt; ()'</span></span><br></pre></td></tr></table></figure><p>The message is pretty clear. Because Swift doesn’t know how one wants the associated values to be encoded, and there is no defined standard, it doesn’t know what to do, and, consequently, asks the developer to implement them.</p><h3 id="Implementing-the-Encodable-amp-Decodable-protocols"><a href="#Implementing-the-Encodable-amp-Decodable-protocols" class="headerlink" title="Implementing the Encodable &amp; Decodable protocols"></a>Implementing the Encodable &amp; Decodable protocols</h3><h4 id="Encodable"><a href="#Encodable" class="headerlink" title="Encodable"></a>Encodable</h4><p>As the errors stated, there are two methods that need to be implemented. Let’s first do the encoding part, thinking about the JSON declared above, and move to the decoding later on.</p><p>The required method by <code>Encodabl</code>e is <code>encode(to encoder: Encoder)</code>. The parameter is a Encoder, which might be Foundation’s JSONEncoder, or a custom XMLEncoder, for example. In order to encode the data, the Encoder provides three types of encoding containers:</p><ul><li><code>KeyedEncodingContainer&lt;Key&gt;</code>: to be used when the encoding will have a key-value format, using a <code>CodingKey</code> enum to access the possible keys, as used when encoding a dictionary. Types that automatically conform to <code>Encodable</code> will have the <code>CodingKey</code> generated automatically as well.</li><li><code>UnkeyedEncodingContainer</code>: to be used when encoding multiple, unkeyed values, as used when encoding an array, for example.</li><li><code>SingleValueEncodingContainer</code>: to be used when a single primitive value, like a string.</li></ul><p>The documentation says: You must use only one kind of top-level encoding container. This means that when encoding a value, only one container must be used, and not more than one simultaneously. In our case, we will choose the keyed container, because we will encode our enum into a key-value JSON object.</p><p>As mentioned in the explanation of the keyed container, we need to create a CodingKey-conforming type. We will create a case for each possible key in the JSON. Also, because there are only three acceptable statuses (confirmed, waitlist, and not allowed), we can use a simple enum to ensure the status value is one of them.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//<span class="keyword">declare</span> which <span class="keyword">keys</span> <span class="keyword">in</span> the <span class="keyword">JSON</span> we <span class="keyword">are</span> interested <span class="keyword">in</span></span><br><span class="line">enum CodingKeys: <span class="keyword">String</span>, CodingKey &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">status</span></span><br><span class="line">    <span class="keyword">case</span> confirmedUsers</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">position</span></span><br><span class="line">    <span class="keyword">case</span> reason</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//<span class="keyword">declare</span> the possible <span class="keyword">values</span> os the <span class="keyword">status</span> <span class="keyword">key</span></span><br><span class="line"><span class="keyword">private</span> enum EventConfirmationStatus: <span class="keyword">String</span>, Codable &#123;</span><br><span class="line">    <span class="keyword">case</span> confirmed</span><br><span class="line">    <span class="keyword">case</span> waitlist</span><br><span class="line">    <span class="keyword">case</span> notAllowed = <span class="string">"not allowed"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Notice that in both enums, where the raw value is a string, there is no need to actually declare it - the cases are compiled into the raw values (except the notAllowed case). Now it’s left to implement the encoding itself. We will need to do two things: (1) get the keyed container from the encoder, and (2) iterate over the event confirmation enum in order to encode each case, separately:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">EventConfirmationResponse</span>: <span class="title">Encodable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">encode</span><span class="params">(to encoder: Encoder)</span></span> <span class="keyword">throws</span> &#123;</span><br><span class="line">      <span class="comment">//access the keyed container</span></span><br><span class="line">      <span class="keyword">var</span> container = encoder.container(keyedBy: <span class="type">CodingKeys</span>.<span class="keyword">self</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment">//iterate over self and encode (1) the status and (2) the associated value(s)</span></span><br><span class="line">      <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> .confirmed(<span class="keyword">let</span> users):</span><br><span class="line">          <span class="keyword">try</span> container.encode(<span class="type">EventConfirmationStatus</span>.confirmed, forKey: .status)</span><br><span class="line">          <span class="keyword">try</span> container.encode(users, forKey: .confirmedUsers)</span><br><span class="line">      <span class="keyword">case</span> .waitlist(<span class="keyword">let</span> position, <span class="keyword">let</span> users):</span><br><span class="line">          <span class="keyword">try</span> container.encode(<span class="type">EventConfirmationStatus</span>.waitlist, forKey: .status)</span><br><span class="line">          <span class="keyword">try</span> container.encode(users, forKey: .confirmedUsers)</span><br><span class="line">          <span class="keyword">try</span> container.encode(position, forKey: .position)</span><br><span class="line">      <span class="keyword">case</span> .notAllowed(<span class="keyword">let</span> reason):</span><br><span class="line">          <span class="keyword">try</span> container.encode(<span class="type">EventConfirmationStatus</span>.notAllowed, forKey: .status)</span><br><span class="line">          <span class="keyword">try</span> container.encode(reason, forKey: .reason)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can now use JSONEncoder().encode(confirmation) and get a JSON representation of our enum.</p><h4 id="Decodable"><a href="#Decodable" class="headerlink" title="Decodable"></a>Decodable</h4><p>To finally conform do Codable, there’s left the Decodable protocol. To achieve it, we need to initialize our enum given a Decoder with init(from decoder: Decoder).</p><p>Similar Encoder, Decoder also has the three analogue containers. As all 3 states have a status key and we need it to define which state will be initialized, we will look for it first by trying to decode a String for the .status coding key. Then, we iterate on the status value, and look for the other values for the relevant keys:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">EventConfirmationResponse</span>: <span class="title">Decodable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">init</span>(from decoder: <span class="type">Decoder</span>) <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="comment">//access the keyed container</span></span><br><span class="line">        <span class="keyword">let</span> container = <span class="keyword">try</span> decoder.container(keyedBy: <span class="type">CodingKeys</span>.<span class="keyword">self</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//decode the value for the status key into the EventConfirmationStatus enum</span></span><br><span class="line">        <span class="keyword">let</span> status = <span class="keyword">try</span> container.decode(<span class="type">EventConfirmationStatus</span>.<span class="keyword">self</span>, forKey: .status)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//iterate over the received status, and try to decode the other relevant values</span></span><br><span class="line">        <span class="keyword">switch</span> status &#123;</span><br><span class="line">        <span class="keyword">case</span> .confirmed:</span><br><span class="line">            <span class="keyword">let</span> users = <span class="keyword">try</span> container.decode([<span class="type">User</span>].<span class="keyword">self</span>, forKey: .confirmedUsers)</span><br><span class="line">            <span class="keyword">self</span> = .confirmed(users)</span><br><span class="line">        <span class="keyword">case</span> .waitlist:</span><br><span class="line">            <span class="keyword">let</span> users = <span class="keyword">try</span> container.decode([<span class="type">User</span>].<span class="keyword">self</span>, forKey: .confirmedUsers)</span><br><span class="line">            <span class="keyword">let</span> position = <span class="keyword">try</span> container.decode(<span class="type">Int</span>.<span class="keyword">self</span>, forKey: .position)</span><br><span class="line">            <span class="keyword">self</span> = .waitlist(position, users)</span><br><span class="line">        <span class="keyword">case</span> .notAllowed:</span><br><span class="line">            <span class="keyword">let</span> reason = <span class="keyword">try</span> container.decode(<span class="type">String</span>.<span class="keyword">self</span>, forKey: .reason)</span><br><span class="line">            <span class="keyword">self</span> = .notAllowed(reason)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Done! Our enum is now ready to be encoded and decoded. If you want to test and see all the code in a single place, I’ve prepared a playground which you can <a href="https://files.natanrolnik.me/blog-downloads/CodableEnumsWithAssociatedValues.playground.zip" target="_blank" rel="noopener">download here</a>.</p><p>Happy coding!<br>[Source: Natan Rolnik]</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;One of Swift’s greatest features, and one of my favorites, are enums with associated values. The language itself uses them for its fundamentals, like &lt;code&gt;Optional&amp;lt;T&amp;gt;&lt;/code&gt;, which either has a &lt;code&gt;.some(T)&lt;/code&gt; or is &lt;code&gt;.none&lt;/code&gt;. Another example is the new since Swift 5 &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt;, which either contains a &lt;code&gt;.success(T)&lt;/code&gt; or a &lt;code&gt;.failure(E)&lt;/code&gt; case. In this post, we will go over cases (no pun intended) where an enum is more suitable than a struct or class, and also learn how one can make enums with associated values conform to Codable, achieving a better and safer usage of these data representations when they need to be encoded and decoded. You can scroll to the end of the post to get the final playground.&lt;/p&gt;
&lt;p&gt;Enums with associated values make sense when a type may hold only one value, instead of two or more optional values. A classic example for Result is a network operation, which might return either an error or an object. They never should be nil or not be nil simultaneously: when one is nil, the other should exist.&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//in this case, the caller must check for nil for both values&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;issueRequest&lt;/span&gt;&amp;lt;T&amp;gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; request: URLRequest, completion: @escaping &lt;span class=&quot;params&quot;&gt;(T?, Error?)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//here, however, it will be either .success or .failure&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;issueRequest&lt;/span&gt;&amp;lt;T&amp;gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; request: URLRequest, completion: @escaping &lt;span class=&quot;params&quot;&gt;(Result&amp;lt;T, Error&amp;gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Inclusive Enums With OptionSet</title>
    <link href="https://duc.ninja/2019/05/252019/may-25-optionset/"/>
    <id>https://duc.ninja/2019/05/252019/may-25-optionset/</id>
    <published>2019-05-25T01:30:00.000Z</published>
    <updated>2019-09-28T02:53:12.644Z</updated>
    
    <content type="html"><![CDATA[<p>Enums are one of the most powerful features of Swift language. It forms Value-Oriented Programming in conjunction with Structs. Enum is the best way to describe the exclusive state in Swift, but what about the case when you need an inclusive state. Today we will talk about OptionSet protocol and how we can achieve inclusive states with it.</p><h3 id="Exclusive-Enums"><a href="#Exclusive-Enums" class="headerlink" title="Exclusive Enums"></a>Exclusive Enums</h3><p>Assume that we have some HistoryFetcher class, which can fetch data from a cache or make a network request or both of them. Let’s start with describing very simple source enum.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">FetchSource</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> memory</span><br><span class="line">    <span class="keyword">case</span> disk</span><br><span class="line">    <span class="keyword">case</span> remote</span><br><span class="line">    <span class="keyword">case</span> cache</span><br><span class="line">    <span class="keyword">case</span> all</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>Now we can work on our history fetch method which will take a source as a parameter and make request accordingly to the source.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HistoryFetcher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fetch</span><span class="params">(from source: FetchSource = .all, handler: @escaping Handler&lt;History&gt;)</span></span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> source &#123;</span><br><span class="line">        <span class="keyword">case</span> .memory:</span><br><span class="line">            fetchMemory(handler: handler)</span><br><span class="line">        <span class="keyword">case</span> .disk:</span><br><span class="line">            fetchDisk(handler: handler)</span><br><span class="line">        <span class="keyword">case</span> .remote:</span><br><span class="line">            fetchRemote(handler: handler)</span><br><span class="line">        <span class="keyword">case</span> .cache:</span><br><span class="line">            fetchMemory(handler: handler)</span><br><span class="line">            fetchDisk(handler: handler)</span><br><span class="line">        <span class="keyword">case</span> .all:</span><br><span class="line">            fetchMemory(handler: handler)</span><br><span class="line">            fetchDisk(handler: handler)</span><br><span class="line">            fetchRemote(handler: handler)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There are possible downsides of this approach.</p><p>As soon as we increase the count of the sources, we have to add a separated case for that and add it to “all” case handling.<br>We can’t easily create some unions of sources, like memory and remote, or disk and remote, etc. We need a lot of additional logic here to make it possible.</p><h4 id="OptionSet-for-the-rescue"><a href="#OptionSet-for-the-rescue" class="headerlink" title="OptionSet for the rescue"></a>OptionSet for the rescue</h4><p>OptionSet is a protocol which represents bitset types, where individual bits represent members of a set. Adopting this protocol in your custom types lets you perform set-related operations such as membership tests, unions, and intersections on those types.</p><p>OptionSet protocol is very straightforward. All we need is rawValue property which should be a type conforming FixedWidthInteger. So basically in most cases, we can use Int type. Next, we have to create unique options using the unique power of two for every case. Here we can use bit shifting operators. Let’s refactor our FetchSource enum to use OptionSet.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FetchSource</span>: <span class="title">OptionSet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> rawValue: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> memory = <span class="type">FetchSource</span>(rawValue: <span class="number">1</span> &lt;&lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> disk = <span class="type">FetchSource</span>(rawValue: <span class="number">1</span> &lt;&lt; <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> remote = <span class="type">FetchSource</span>(rawValue: <span class="number">1</span> &lt;&lt; <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> cache: <span class="type">FetchSource</span> = [.memory, .disk]</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> all: <span class="type">FetchSource</span> = [.cache, .remote]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As you see above, we can create multiple union members, which contains other members. It brings real power while handling this OptionSets. Here is the refactored version of our HistoryFetcher class.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HistoryFetcher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fetch</span><span class="params">(from source: FetchSource = .all, handler: @escaping Handler&lt;History&gt;)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> source.<span class="built_in">contains</span>(.memory) &#123;</span><br><span class="line">            fetchMemory(handler: handler)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> source.<span class="built_in">contains</span>(.disk) &#123;</span><br><span class="line">            fetchDisk(handler: handler)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> source.<span class="built_in">contains</span>(.remote) &#123;</span><br><span class="line">            fetchRemote(handler: handler)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>New implementation of HistoryFetcher class is pretty simple. We handle every unique case of FetchSource which is also covering all possible unions of our OptionSet.</p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>Today we learn how to use OptionSet protocol and how it can be useful as Enum replacement with some extra features. We will continue to cover small and powerful types from the Swift Foundation in future posts.</p><p>Happy coding!<br>[Source: mecid]</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Enums are one of the most powerful features of Swift language. It forms Value-Oriented Programming in conjunction with Structs. Enum is the best way to describe the exclusive state in Swift, but what about the case when you need an inclusive state. Today we will talk about OptionSet protocol and how we can achieve inclusive states with it.&lt;/p&gt;
&lt;h3 id=&quot;Exclusive-Enums&quot;&gt;&lt;a href=&quot;#Exclusive-Enums&quot; class=&quot;headerlink&quot; title=&quot;Exclusive Enums&quot;&gt;&lt;/a&gt;Exclusive Enums&lt;/h3&gt;&lt;p&gt;Assume that we have some HistoryFetcher class, which can fetch data from a cache or make a network request or both of them. Let’s start with describing very simple source enum.&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FetchSource&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; memory&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; disk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; remote&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; cache&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; all&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Empty Strings in Swift 5</title>
    <link href="https://duc.ninja/2019/05/242019/swift-5-empty-string/"/>
    <id>https://duc.ninja/2019/05/242019/swift-5-empty-string/</id>
    <published>2019-05-24T01:13:00.000Z</published>
    <updated>2019-09-28T02:53:12.644Z</updated>
    
    <content type="html"><![CDATA[<p>How do you tell if a string is empty in Swift? That depends on what you mean by “empty”. You might mean a string with zero length, or maybe also an optional string that is nil. What about a “blank” string that only contains whitespace. Let’s see how to test for each of those conditions with Swift.</p><a id="more"></a><h3 id="Using-isEmpty"><a href="#Using-isEmpty" class="headerlink" title="Using isEmpty"></a>Using isEmpty</h3><p>A Swift <code>String</code> is a collection of characters and the <code>Collection</code> protocol already has a test for an empty collection:</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isEmpty: Bool &#123; <span class="keyword">get</span> &#125;</span><br></pre></td></tr></table></figure><p>We have access to the source code for <code>Collection.swift</code> in the standard library so we can see what this does:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> isEmpty: Bool &#123;</span><br><span class="line">  <span class="keyword">return</span> startIndex == endIndex</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If the <code>startIndex</code> and <code>endIndex</code> of the collection are the same the collection is empty. Using this for a <code>String</code>:</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Hello"</span><span class="string">.isEmpty</span>  <span class="string">//</span> <span class="literal">false</span></span><br><span class="line"><span class="string">""</span><span class="string">.isEmpty</span>       <span class="string">//</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote><p>Note: Use isEmpty rather than comparing count to zero which requires iterating over the entire string:</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// Don't <span class="keyword">do</span> this <span class="keyword">to</span> <span class="keyword">test</span> <span class="keyword">for</span> <span class="keyword">empty</span></span><br><span class="line">myString.count == <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="What-about-whitespace"><a href="#What-about-whitespace" class="headerlink" title="What about whitespace?"></a>What about whitespace?</h3><p>Sometimes I want to test not only for an empty string but for a blank string. For example, I want a test that also returns true for each of these strings:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">" "</span>        <span class="comment">// space</span></span><br><span class="line"><span class="string">"<span class="subst">\t</span>\r<span class="subst">\n</span>"</span>   <span class="comment">// tab, return, newline</span></span><br><span class="line"><span class="string">"\u&#123;00a0&#125;"</span> <span class="comment">// Unicode non-breaking space</span></span><br><span class="line"><span class="string">"\u&#123;2002&#125;"</span> <span class="comment">// Unicode en space</span></span><br><span class="line"><span class="string">"\u&#123;2003&#125;"</span> <span class="comment">// Unicode em space</span></span><br></pre></td></tr></table></figure><p>I’ve seen people do this by first trimming whitespace from the string and then testing for empty. With Swift 5, we can make use of [0221-character-properties][0221-character-properties] to directly test for whitespace. We could write the test like this:</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isBlank</span><span class="params">(_ string: String)</span> -&gt; <span class="title">Bool</span> &#123;</span></span><br><span class="line">  <span class="keyword">for</span> character <span class="keyword">in</span> <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> !character.isWhitespace &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>That works but a simpler way to test all elements in a sequence is to use allSatisfy. Rewriting as an extension of String:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">extension String &#123;</span><br><span class="line">  <span class="selector-tag">var</span> isBlank: Bool &#123;</span><br><span class="line">    return allSatisfy(&#123; $<span class="number">0</span><span class="selector-class">.isWhitespace</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This is looking promising:</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Hello"</span><span class="string">.isBlank</span>        <span class="string">//</span> <span class="literal">false</span></span><br><span class="line"><span class="string">"   Hello   "</span><span class="string">.isBlank</span>  <span class="string">//</span> <span class="literal">false</span></span><br><span class="line"><span class="string">""</span><span class="string">.isBlank</span>             <span class="string">//</span> <span class="literal">true</span></span><br><span class="line"><span class="string">" "</span><span class="string">.isBlank</span>            <span class="string">//</span> <span class="literal">true</span></span><br><span class="line"><span class="string">"\t\r\n"</span><span class="string">.isBlank</span>       <span class="string">//</span> <span class="literal">true</span></span><br><span class="line"><span class="string">"\u&#123;00a0&#125;"</span><span class="string">.isBlank</span>     <span class="string">//</span> <span class="literal">true</span></span><br><span class="line"><span class="string">"\u&#123;2002&#125;"</span><span class="string">.isBlank</span>     <span class="string">//</span> <span class="literal">true</span></span><br><span class="line"><span class="string">"\u&#123;2003&#125;"</span><span class="string">.isBlank</span>     <span class="string">//</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="What-about-optional-strings"><a href="#What-about-optional-strings" class="headerlink" title="What about optional strings?"></a>What about optional strings?</h3><p>We can extend the solution to allow for optional strings. Here’s an extension to Optional where the wrapped element is a String:</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">extension Optional <span class="keyword">where</span> Wrapped == <span class="built_in">String</span> &#123;</span><br><span class="line">  <span class="built_in">var</span> isBlank: Bool &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">self</span>?.isBlank ?? <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using optional chaining with a default value we return true if the optional string is nil else we test the String as before. We can now also write:</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> <span class="built_in">title</span>: String? = nil</span><br><span class="line"><span class="built_in">title</span>.isBlank            // <span class="literal">true</span></span><br><span class="line"><span class="built_in">title</span> = <span class="string">""</span></span><br><span class="line"><span class="built_in">title</span>.isBlank            // <span class="literal">true</span></span><br><span class="line"><span class="built_in">title</span> = <span class="string">"  \t  "</span></span><br><span class="line"><span class="built_in">title</span>.isBlank            // <span class="literal">true</span></span><br><span class="line"><span class="built_in">title</span> = <span class="string">"Hello"</span></span><br><span class="line"><span class="built_in">title</span>.isBlank            // <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>Testing for a “blank” string iterates over the string so don’t use it when isEmpty is all you need.</p><p>Happy coding!<br>[Source: useyourloaf]</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;How do you tell if a string is empty in Swift? That depends on what you mean by “empty”. You might mean a string with zero length, or maybe also an optional string that is nil. What about a “blank” string that only contains whitespace. Let’s see how to test for each of those conditions with Swift.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Swift 4 - Class Only Protocol</title>
    <link href="https://duc.ninja/2018/08/172018/class-only-protocol/"/>
    <id>https://duc.ninja/2018/08/172018/class-only-protocol/</id>
    <published>2018-08-17T01:13:00.000Z</published>
    <updated>2019-09-28T02:53:12.643Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/images/swift4.png" alt></p><p>We usually use the <code>class</code> keyword to define a <code>class only protocol</code> in the normal way.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">DetailViewControllerDelegate</span>: <span class="title">class</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">didFinishTask</span><span class="params">(sender: DetailViewController)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>Since Swift 4, we have an other way to define it. Introduced in <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0156-subclass-existentials.md" target="_blank" rel="noopener">0156-subclass-existentials</a></p><blockquote><p>This proposal merges the concepts of class and AnyObject, which now have the same meaning: they represent an existential for classes.</p></blockquote><p>So, it much clearer with the new way:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">DetailViewControllerDelegate</span>: <span class="title">AnyObject</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">didFinishTask</span><span class="params">(sender: DetailViewController)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Happy coding!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/images/swift4.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;We usually use the &lt;code&gt;class&lt;/code&gt; keyword to define a &lt;code&gt;class only protocol&lt;/code&gt; in the normal way.&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DetailViewControllerDelegate&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;class&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;didFinishTask&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(sender: DetailViewController)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>More Interface Builder Tips and Tricks</title>
    <link href="https://duc.ninja/2018/03/042018/interface-builder-tips-and-tricks/"/>
    <id>https://duc.ninja/2018/03/042018/interface-builder-tips-and-tricks/</id>
    <published>2018-03-04T15:56:00.000Z</published>
    <updated>2019-09-28T02:53:12.643Z</updated>
    
    <content type="html"><![CDATA[<p>My top ten tips, tricks, dos and don’ts to make you feel like an Interface Builder expert.</p><a id="more"></a><ul><li>To easily select an object when it is behind a stack of other items hold down the Ctrl (⌃) + Shift (⇧) keys and then click over the object. Select the item you want from the popup menu showing the full view hierarchy at the point where you clicked.</li></ul><p><img src="/assets/images/ib-tips/ib-tips001.png" alt></p><ul><li>Click on a view in the canvas to select it and then hold down the Option (⌥) key. Move the mouse pointer over other views in the scene to see the distances between the views:</li></ul><p><img src="/assets/images/ib-tips/ib-tips002.png" alt></p><ul><li><p>To quickly copy an object in the canvas, hold down the Option (⌥) key and then click on and drag the object.</p></li><li><p>When adjusting the position of a view in the canvas the arrow keys move the view by one point at a time. Hold down the Shift (⇧) key to jump by 5 points at a time.</p></li><li><p>When creating constraints in the canvas or document outline use the Shift (⇧) key to select multiple constraints:</p></li></ul><p><img src="/assets/images/ib-tips/ib-tips003.png" alt></p><p>Use the Option (⌥) key for alternate constraints. Useful when you want the margins instead of the safe area or a 1:1 aspect ratio:</p><p><img src="/assets/images/ib-tips/ib-tips004.png" alt></p><ul><li>There are some useful options for the canvas in the Xcode Editor menu.</li></ul><p><img src="/assets/images/ib-tips/ib-tips005.png" alt></p><p>I like to turn on either Show Layout Rectangles or Show Bounds Rectangles to see the layout guides or bounds of views.</p><p>If you are fighting with constraint priorities try turning on Show Intrinsic Size Constraints Contributing To Ambiguity. It makes it easier to see which priorities you need to change to fix the problem:</p><p><img src="/assets/images/ib-tips/ib-tips006.png" alt></p><ul><li>Don’t let your Storyboards get too large. Interface Builder slows down and if you are collaborating with other developers it gets harder to avoid conflicts. Use Editor &gt; Refactor To Storyboard to break it into smaller scenes with storyboard references. See Refactoring with Storyboard References.</li></ul><p><img src="/assets/images/ib-tips/ib-tips007.png" alt></p><ul><li><p>Don’t trust Interface Builder to Reset to Suggested Constraints. It will rarely do what you want.</p></li><li><p>Use command-equal (⌘=) to quickly resize a label, button, image, etc. to fit the content size. For example, this label is too small and high for the text:</p></li></ul><p><img src="/assets/images/ib-tips/ib-tips008.png" alt></p><p>After using ⌘= to size to fit contents:</p><p><img src="/assets/images/ib-tips/ib-tips009.png" alt></p><ul><li>Don’t forget you can preview your layout on different devices and orientations in Interface Builder with the assistant editor. This is much faster than launching the simulator or running on a device. Use the + in the bottom left corner of the assistant editor to add devices.</li></ul><p><img src="/assets/images/ib-tips/ib-tips010.png" alt></p><p>You can add multiple assistant editors with the + in the top right corner of the assistant editor. I like to use this to preview layouts with different localizations. Change the localization with the menu in the bottom right corner.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;My top ten tips, tricks, dos and don’ts to make you feel like an Interface Builder expert.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Open Terminal From Xcode</title>
    <link href="https://duc.ninja/2018/02/042018/open-terminal-from-xcode/"/>
    <id>https://duc.ninja/2018/02/042018/open-terminal-from-xcode/</id>
    <published>2018-02-04T06:20:00.000Z</published>
    <updated>2019-09-28T02:53:12.643Z</updated>
    
    <content type="html"><![CDATA[<p>You are using third-party tools like CocoaPods, Cathage, SPM or just having some useful script files for your project. It’s fine!</p><a id="more"></a><p>But you often found yourself in need of opening a Terminal window at the project location. It hard to tell that feeling. 🤔 Don’t worry, here is what you need to do:</p><h3 id="1-Create-a-sh-file"><a href="#1-Create-a-sh-file" class="headerlink" title="1.  Create a sh file"></a>1.  Create a sh file</h3><p>Create a new text file with your favourite text editor and put this inside:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">! /bin/bash</span></span><br><span class="line">open -a Terminal "$SRCROOT"</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">if [ -n "$XcodeProjectPath" ]; then</span><br><span class="line">  open -a Terminal "$XcodeProjectPath"/..</span><br><span class="line">else</span><br><span class="line">  open -a Terminal "$XcodeWorkspacePath"/..</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>It opens either <code>.xcodeproj</code> or <code>.xcworkspace</code>.</p><blockquote><p>If you prefer iTerm, just change the Terminal keyword to iTerm in this script. I’m using <strong>iTerm</strong> too, so I created a bash file like this:</p></blockquote><p><img src="/assets/images/open-terminal-from-xcode/create-script.png" alt="Create script file"></p><h3 id="2-Store-the-file"><a href="#2-Store-the-file" class="headerlink" title="2. Store the file"></a>2. Store the file</h3><p>Save it with a .sh extension in some permanent location where your wife or your girlfriend wouldn’t see it everyday so it annoys them, and they won’t delete it by mistake.</p><h3 id="3-Grant-execute-permission"><a href="#3-Grant-execute-permission" class="headerlink" title="3. Grant execute permission"></a>3. Grant execute permission</h3><p>Navigate to the location of the script file you just created using Terminal and change its permissions using:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x &lt;fileName&gt;</span><br></pre></td></tr></table></figure><p>where <strong>fileName</strong> should be replaced with the name of the .sh file you just created.</p><h3 id="4-Add-a-custom-behavior"><a href="#4-Add-a-custom-behavior" class="headerlink" title="4. Add a custom behavior"></a>4. Add a custom behavior</h3><p>In Xcode, go to <strong>Preferences -&gt; Behaviors</strong> and click the plus sign in the bottom to add a new behavior and name it something like <strong>“Open Terminal”</strong></p><p><img src="/assets/images/open-terminal-from-xcode/create-a-custom-behavior.png" alt></p><p>Tick only the last checkbox, where it says “Run”, and select the location of your .sh file.</p><h3 id="5-Assign-a-key"><a href="#5-Assign-a-key" class="headerlink" title="5. Assign a key"></a>5. Assign a key</h3><p>Click the little ⌘ symbol to the right of your behavior name and select a new keyboard shortcut for your behavior. I recommend: ctrl+command+t.</p><p><img src="/assets/images/open-terminal-from-xcode/assign-key.png" alt></p><p>That’s it, you’re done!  🎉  🎉  🎉</p><p>You can get my sh file here: <a href="https://gitlab.com/snippets/1697089" target="_blank" rel="noopener">xcode-terminal.sh</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;You are using third-party tools like CocoaPods, Cathage, SPM or just having some useful script files for your project. It’s fine!&lt;/p&gt;
    
    </summary>
    
    
      <category term="xcode" scheme="https://duc.ninja/tags/xcode/"/>
    
      <category term="tips" scheme="https://duc.ninja/tags/tips/"/>
    
      <category term="til" scheme="https://duc.ninja/tags/til/"/>
    
  </entry>
  
  <entry>
    <title>LLDB: Po vs E</title>
    <link href="https://duc.ninja/2018/01/252018/po-vs-e/"/>
    <id>https://duc.ninja/2018/01/252018/po-vs-e/</id>
    <published>2018-01-25T14:43:00.000Z</published>
    <updated>2019-09-28T02:53:12.643Z</updated>
    
    <content type="html"><![CDATA[<p>For the longest time I just used “po” in lldb to examine objects but “e” just adds a whole new level to debugging !<br><br></p><a id="more"></a><p><img src="/assets/images/po-vs-e.jpg" alt></p><p>Source: @caro</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;For the longest time I just used “po” in lldb to examine objects but “e” just adds a whole new level to debugging !&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="xcode" scheme="https://duc.ninja/tags/xcode/"/>
    
      <category term="tips" scheme="https://duc.ninja/tags/tips/"/>
    
      <category term="ios" scheme="https://duc.ninja/tags/ios/"/>
    
      <category term="lldb" scheme="https://duc.ninja/tags/lldb/"/>
    
  </entry>
  
  <entry>
    <title>Shortcut to Run a Test Case or Run Whole Test Case</title>
    <link href="https://duc.ninja/2018/01/252018/run-test-case/"/>
    <id>https://duc.ninja/2018/01/252018/run-test-case/</id>
    <published>2018-01-25T14:43:00.000Z</published>
    <updated>2019-09-28T02:53:12.643Z</updated>
    
    <content type="html"><![CDATA[<p> <code>⌃⌥⌘U</code> shortcut does different things depending on the current cursor location:</p><ul><li>inside a test method: runs this single test method</li><li>inside an <code>XCTestCase</code> subclass but outside of any method: runs all tests in the class</li><li>Run last test case before: <code>⌃⌥⌘G</code><a id="more"></a><img src="/assets/images/run-test-case.jpg" alt></li></ul><p>Source: @arekholko</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;code&gt;⌃⌥⌘U&lt;/code&gt; shortcut does different things depending on the current cursor location:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inside a test method: runs this single test method&lt;/li&gt;
&lt;li&gt;inside an &lt;code&gt;XCTestCase&lt;/code&gt; subclass but outside of any method: runs all tests in the class&lt;/li&gt;
&lt;li&gt;Run last test case before: &lt;code&gt;⌃⌥⌘G&lt;/code&gt;
    
    </summary>
    
    
      <category term="xcode" scheme="https://duc.ninja/tags/xcode/"/>
    
      <category term="tips" scheme="https://duc.ninja/tags/tips/"/>
    
      <category term="ios" scheme="https://duc.ninja/tags/ios/"/>
    
      <category term="testing" scheme="https://duc.ninja/tags/testing/"/>
    
  </entry>
  
  <entry>
    <title>Passing Data Using NotificationCenter in Swift 4</title>
    <link href="https://duc.ninja/2017/11/122017/passing-data-using-notificationcenter-in-swift-4/"/>
    <id>https://duc.ninja/2017/11/122017/passing-data-using-notificationcenter-in-swift-4/</id>
    <published>2017-11-12T15:15:00.000Z</published>
    <updated>2019-09-28T02:53:12.641Z</updated>
    
    <content type="html"><![CDATA[<p>Passing data from one view controller to another view controller using Notification Center is an easy way when compared to <code>delegate protocols</code>.</p><p>Here we need add <code>observer</code> or <code>listeners</code> for getting new data to load. First we need to send data using post notification method.</p><a id="more"></a><h2 id="Sending-Data-Post-Notification"><a href="#Sending-Data-Post-Notification" class="headerlink" title="Sending Data - Post Notification:"></a>Sending Data - Post Notification:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dataToSend = [<span class="string">"name"</span> : <span class="string">"John"</span>, <span class="string">"age"</span> : <span class="number">25</span>] <span class="keyword">as</span> [<span class="built_in">String</span> : Any]</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NotificationCenter<span class="selector-class">.default</span><span class="selector-class">.post</span>(name: NSNotification.Name(rawValue: <span class="string">"newDataToLoad"</span>), <span class="selector-tag">object</span>: dataToSend)</span><br></pre></td></tr></table></figure><p>Before sending data we need to listen for the above notification using  <code>NSNotification.Name</code></p><h2 id="Data-Receiving-Add-observer"><a href="#Data-Receiving-Add-observer" class="headerlink" title="Data Receiving - Add observer:"></a>Data Receiving - Add observer:</h2><p>Add the following code for <code>listening</code> to new data:</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">NotificationCenter</span><span class="selector-class">.default</span><span class="selector-class">.addObserver</span>(self, <span class="attribute">selector</span>: #selector(notificationRecevied(<span class="attribute">notification</span>:)), <span class="attribute">name</span>: NSNotification.Name(<span class="attribute">rawValue</span>: <span class="string">"newDataToLoad"</span>), <span class="attribute">object</span>: nil)</span><br></pre></td></tr></table></figure><p>Add the following method to retrieve data:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">notificationRecevied</span><span class="params">(notification: Notification)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data = notification.object</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Remove-Observer"><a href="#Remove-Observer" class="headerlink" title="Remove Observer:"></a>Remove Observer:</h2><p>Don’t forgot to remove observer on<code>viewWillDisappear()</code>as follow:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NotificationCenter<span class="selector-class">.default</span><span class="selector-class">.removeObserver</span>(self, name: NSNotification.Name(rawValue: <span class="string">"newDataToLoad"</span>), <span class="selector-tag">object</span>: nil)</span><br></pre></td></tr></table></figure><p>Source: iosrevisited</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Passing data from one view controller to another view controller using Notification Center is an easy way when compared to &lt;code&gt;delegate protocols&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here we need add &lt;code&gt;observer&lt;/code&gt; or &lt;code&gt;listeners&lt;/code&gt; for getting new data to load. First we need to send data using post notification method.&lt;/p&gt;
    
    </summary>
    
    
      <category term="tips" scheme="https://duc.ninja/tags/tips/"/>
    
      <category term="swift" scheme="https://duc.ninja/tags/swift/"/>
    
      <category term="ios" scheme="https://duc.ninja/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>Save Custom Objects Into UserDefaults(Swift 4)</title>
    <link href="https://duc.ninja/2017/11/072017/save-custom-object-into-userdefaults/"/>
    <id>https://duc.ninja/2017/11/072017/save-custom-object-into-userdefaults/</id>
    <published>2017-11-07T14:47:00.000Z</published>
    <updated>2019-09-28T02:53:12.642Z</updated>
    
    <content type="html"><![CDATA[<p>We have many ways to store and retrieve persistent data in iOS but let try to store a custom object into <code>UserDefaults</code> with <code>Codable</code> in Swift 4.</p><a id="more"></a><p>We have a custom object like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">User</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And now, let define a object:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = <span class="type">User</span>(id: <span class="string">"abc123"</span>, name: <span class="string">"Tim can Cook"</span>, age: <span class="number">13</span>)</span><br></pre></td></tr></table></figure><p>Finally, we have to encode it using <code>JSONEncoder</code> then it can be persist into UserDefaults.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> kUser = <span class="string">"kUser"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> encoded = <span class="keyword">try</span>? <span class="type">JSONEncoder</span>().encode(user) &#123;</span><br><span class="line">    <span class="type">UserDefaults</span>.standard.<span class="keyword">set</span>(encoded, forKey: <span class="string">"kUser"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> userData = <span class="type">UserDefaults</span>.standard.data(forKey: <span class="string">"kUser"</span>),</span><br><span class="line">    <span class="keyword">let</span> user = <span class="keyword">try</span>? <span class="type">JSONDecoder</span>().decode(<span class="type">User</span>.<span class="keyword">self</span>, from: userData) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dump</span>(user)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now you can see the log on the console:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">▿ __lldb_expr_10.User</span><br><span class="line">  - id: <span class="string">"ABCD1234"</span></span><br><span class="line">  - name: <span class="string">"Tim can Cook"</span></span><br><span class="line">  - age: 13</span><br></pre></td></tr></table></figure><p>That’s it! You can download the  <a href="https://github.com/ducito/CustomObjectWithUserDefaults/archive/master.zip" target="_blank" rel="noopener"><strong>final playground file here.</strong></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We have many ways to store and retrieve persistent data in iOS but let try to store a custom object into &lt;code&gt;UserDefaults&lt;/code&gt; with &lt;code&gt;Codable&lt;/code&gt; in Swift 4.&lt;/p&gt;
    
    </summary>
    
    
      <category term="tips" scheme="https://duc.ninja/tags/tips/"/>
    
      <category term="swift" scheme="https://duc.ninja/tags/swift/"/>
    
      <category term="ios" scheme="https://duc.ninja/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>Easy XIB and Storyboard Localization</title>
    <link href="https://duc.ninja/2017/11/052017/easy-xib-and-storyboard-localization/"/>
    <id>https://duc.ninja/2017/11/052017/easy-xib-and-storyboard-localization/</id>
    <published>2017-11-05T15:30:00.000Z</published>
    <updated>2019-09-28T02:53:12.639Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn-images-1.medium.com/max/1600/1*oFXeXtJ2LM8uB7prmtAZmw.jpeg" alt="img">Photo by <a href="https://unsplash.com/photos/jUSu0686zDM" target="_blank" rel="noopener">freestocks.org</a> on <a href="https://unsplash.com" target="_blank" rel="noopener">Unsplash</a></p><p>Localization is a key part of an application. In order to make it easy, maintainable and extensible it deserves a bit of effort and care.</p><a id="more"></a><p>But for iOS graphic interfaces made with Interface Builder, it becomes a bit tricky to accomplish those goals.</p><h3 id="Storyboard-localization-what-the-heck"><a href="#Storyboard-localization-what-the-heck" class="headerlink" title="Storyboard localization: what the heck!"></a>Storyboard localization: what the heck!</h3><p>Say we have a Storyboard with an interface like this:</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*9hTd6a-GI-p5IJiTtcwfqw.png" alt="img"></p><p>There are three controls suitable to be localized: the “Title” label, the “Information” label and the “Buy” button. We want to localize the UI in English and Spanish.</p><p>The classic strategy is to have two <code>Main.storyboard</code> files, one in a <code>en.lproj</code>folder and the other in a <code>es.lproj</code> folder. That sounds simple but it leads to a huge problem of maintenance as some change in the UI requires changing all the Storyboards. Imagine an app localized in more than two languages.</p><p>The second option is to tick “English — Localizable Strings” in the localization pane in the File inspector of the Storyboard; it creates a <code>strings</code> file called <code>Main.strings</code> located in the folder <code>en.lproj</code>. This file looks like this:</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*AaeTIl9OwM9jR6VKwq6XOQ.png" alt="img"></p><p>It has the usual syntax of a <code>strings</code> file, but the first thing you may notice is how the controls are identified. We have names like <code>Axl-vE-Aj2</code> for the “Title” label, or <code>cY0-hb-qiL</code> for the “Buy” button.</p><p>Well, it is a bit confusing, but we can move on and localize the UI to Spanish. We create the new Spanish Localization in the Configuration pane of the project and automatically Xcode creates a new <code>Main.strings</code> file inside the <code>es.lproj</code> folder. Let’s open that file and translate the texts to Spanish:</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*AJMl0WFOOGvPRPWPTTKndQ.png" alt="img"></p><p>It sounds pretty straightforward, but this workflow has a bunch of problems:</p><ul><li>If you change something in IB, the <code>strings</code> files are not updated. You have to use <em>ibtool</em> or <em>AppleGlot</em> to get it done. More about this <a href="https://ayeohyes.wordpress.com/2015/07/24/localizing-storyboards-and-xibs/" target="_blank" rel="noopener">here</a>.</li><li>The names of the controls are not in a human readable manner, not even if we have filled the “Label” property of the control (Identity Inspector &gt; Document).</li><li>There is no possibility to reuse localizations from other <code>.strings</code> files, or at least I did not find the way to refer to them.<br>For example, given the usual <code>Localizable.strings</code> file, to make a reference with something like <code>cY0-hb-qiL.normalTitle = &quot;${to_buy}&quot;</code>.</li><li>We have localizations dispersed in more than one file: one for the localizations in code (<code>Localizable.strings</code>) and another to localize IB files (<code>Main.strings</code>).</li><li>Probably, we’ll have translations repeated in both files if we need to use it in code and IB.</li></ul><p>So I give a thought to this, and after a couple of searches, I arrived to a <a href="https://stackoverflow.com/a/21443515/191059" target="_blank" rel="noopener">Stack Overflow answer</a> that pointed to a perfect solution to this: to use the *<em>User Defined Runtime Attributes *</em>that we can find at the Identity Inspector.</p><p>Let’s see how to achieve it.</p><hr><h3 id="Step-1-Localizable-protocols"><a href="#Step-1-Localizable-protocols" class="headerlink" title="Step 1. Localizable protocols"></a>Step 1. Localizable protocols</h3><p>The first step is to create a couple of very simple protocols.</p><p><code>Localizable</code>, that we will use to get a localized string from another string used as the key:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Localizable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> localized: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">extension <span class="built_in">String</span>: Localizable &#123;</span><br><span class="line">    <span class="built_in">var</span> localized: <span class="built_in">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> NSLocalizedString(<span class="built_in">self</span>, comment: <span class="string">""</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And <code>XIBLocalizable</code>, that we will use to localize controls from an IB file:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">XIBLocalizable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xibLocKey: <span class="type">String?</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we have to implement this interface in those controls suitable to be localized:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UILabel</span>: <span class="title">XIBLocalizable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@IBInspectable</span> <span class="keyword">var</span> xibLocKey: <span class="type">String?</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">        <span class="keyword">set</span>(key) &#123;</span><br><span class="line">            text = key?.localized</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIButton</span>: <span class="title">XIBLocalizable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@IBInspectable</span> <span class="keyword">var</span> xibLocKey: <span class="type">String?</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">        <span class="keyword">set</span>(key) &#123;</span><br><span class="line">            setTitle(key?.localized, <span class="keyword">for</span>: .normal)</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>NOTE</strong>: <code>get</code> is irrelevant in this case, we are not going to need the name of the key used in the <code>Localizable.strings</code> file anywhere.</p><p><strong>NOTE 2</strong>: in order to make this run on Swift 4 you have to add <code>@IBInspectable</code>to the <code>xibLocKey</code> implementation, else it will not work:</p><blockquote><p>Failed to set (xibLocKey) user defined inspected property on (UIButton): [&lt;UIButton 0x7fb24a50dbc0&gt; setValue:forUndefinedKey:]: this class is not key value coding-compliant for the key xibLocKey.</p></blockquote><h3 id="Step-2-Set-the-localization-key-in-IB"><a href="#Step-2-Set-the-localization-key-in-IB" class="headerlink" title="Step 2. Set the localization key in IB"></a>Step 2. Set the localization key in IB</h3><p>The second step is to set, for each control, its associated localization key. We have two <code>Localizable.strings</code> files.</p><p><code>en.lproj</code> file:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">“title” = “Title”<span class="comment">;</span></span><br><span class="line">“info” = “Information”<span class="comment">;</span></span><br><span class="line">“to_buy” = “Buy”<span class="comment">;</span></span><br></pre></td></tr></table></figure><p><code>es.lproj</code> file:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"title"</span> = <span class="string">"Título"</span><span class="comment">;</span></span><br><span class="line"><span class="string">"info"</span> = <span class="string">"Información"</span><span class="comment">;</span></span><br><span class="line"><span class="string">"to_buy"</span> = <span class="string">"Comprar"</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><p>Now it is time to set these keys in IB. To do that we have to:</p><ol><li>Select the control to be localized, for example the “Title” label.</li><li>Go to the Identity Inspector and add a new value to the <em>User Defined Runtime Attributes</em>. Fill it with <code>Key Path = xibLocKey</code> , <code>Type = String</code> and <code>Value = title</code> . It may look like this:</li></ol><p><img src="https://cdn-images-1.medium.com/max/1600/1*lTVg9pCO35OzgY1oObi8Wg.png" alt="img"></p><p>As our properties are <code>@IBInspectable</code> you can also fill the <code>xibLocKey</code> in the <em>Attributes Inspector:</em></p><p><img src="https://cdn-images-1.medium.com/max/1600/1*ZDtR1ogbCU3zmUBmCZQ3YA.png" alt="img"></p><p>That’s all! Repeat these steps with every control you want to localize and run the app to test it.</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*YlzFrh9t24GWIFWcDgvQPQ.png" alt="img">Left: iPhone 6 in Spanish; Right: iPhone SE in English</p><hr><p>This is a very clever and simple solution, and it avoids two important flaws we will encounter in other solutions:</p><ol><li>It is a great way to get rid of complicated workflows involving external tools.</li><li>It also encourages <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" target="_blank" rel="noopener">DRY principle</a> to use localizations in code and Interface Builder without having the same translation in two different files.</li></ol><p>You can find a example project in my <a href="https://github.com/emenegro/xib-localization" target="_blank" rel="noopener">GitHub</a>.</p><p>Source: Mario Negro</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1600/1*oFXeXtJ2LM8uB7prmtAZmw.jpeg&quot; alt=&quot;img&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/photos/jUSu0686zDM&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;freestocks.org&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Localization is a key part of an application. In order to make it easy, maintainable and extensible it deserves a bit of effort and care.&lt;/p&gt;
    
    </summary>
    
    
      <category term="xcode" scheme="https://duc.ninja/tags/xcode/"/>
    
      <category term="tips" scheme="https://duc.ninja/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>Dependency Injection Examples With Swift 4</title>
    <link href="https://duc.ninja/2017/11/052017/dependency-injection-swift-4/"/>
    <id>https://duc.ninja/2017/11/052017/dependency-injection-swift-4/</id>
    <published>2017-11-05T14:16:00.000Z</published>
    <updated>2019-09-28T02:53:12.639Z</updated>
    
    <content type="html"><![CDATA[<p>In <a href="https://en.wikipedia.org/wiki/Software_engineering" target="_blank" rel="noopener">software engineering</a>, <strong>dependency injection</strong> is a technique whereby one object supplies the dependencies of another object. A dependency is an object that can be used (a <a href="https://en.wikipedia.org/wiki/Service_(systems_architecture)" target="_blank" rel="noopener">service</a>). An injection is the passing of a dependency to a dependent object (a <a href="https://en.wikipedia.org/wiki/Client_(computing)" target="_blank" rel="noopener">client</a>) that would use it.</p><a id="more"></a><p>The service is made part of the client’s <a href="https://en.wikipedia.org/wiki/State_(computer_science)" target="_blank" rel="noopener">state</a>.<a href="https://en.wikipedia.org/wiki/Dependency_injection#cite_note-JamesShore-1" target="_blank" rel="noopener">[1]</a> Passing the service to the client, rather than allowing a client to build or <a href="https://en.wikipedia.org/wiki/Service_locator_pattern" target="_blank" rel="noopener">find the service</a>, is the fundamental requirement of the pattern. - <a href="https://en.wikipedia.org/wiki/Dependency_injection" target="_blank" rel="noopener">Wikipedia</a>.</p><h3 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR."></a>TL;DR.</h3><p><img src="/assets/images/di.png" alt></p><h3 id="Initializer-injection"><a href="#Initializer-injection" class="headerlink" title="Initializer injection"></a>Initializer injection</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Serializer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">serialize</span><span class="params">(data: <span class="keyword">Any</span>)</span></span> -&gt; <span class="type">Data?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestSerializer</span>: <span class="title">Serializer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">serialize</span><span class="params">(data: <span class="keyword">Any</span>)</span></span> -&gt; <span class="type">Data?</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> serializer: <span class="type">Serializer?</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(serializer: <span class="type">Serializer</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.serializer = serializer</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> serializer = <span class="type">RequestSerializer</span>()</span><br><span class="line"><span class="comment">// DI</span></span><br><span class="line"><span class="keyword">let</span> dataManager = <span class="type">DataManager</span>(serializer: serializer)</span><br></pre></td></tr></table></figure><h3 id="Property-injection"><a href="#Property-injection" class="headerlink" title="Property injection"></a>Property injection</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Serializer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">serialize</span><span class="params">(data: <span class="keyword">Any</span>)</span></span> -&gt; <span class="type">Data?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestSerializer</span>: <span class="title">Serializer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">serialize</span><span class="params">(data: <span class="keyword">Any</span>)</span></span> -&gt; <span class="type">Data?</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> serializer: <span class="type">Serializer?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dataManager = <span class="type">DataManager</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// DI</span></span><br><span class="line">dataManager.serializer = <span class="type">RequestSerializer</span>()</span><br></pre></td></tr></table></figure><h3 id="Method-Injection"><a href="#Method-Injection" class="headerlink" title="Method Injection"></a>Method Injection</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Request</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Serializer</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataManager</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">serializeRequest</span><span class="params">(<span class="number">_</span> request: Request, with serializer: Serializer)</span></span> -&gt; <span class="type">Data?</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In &lt;a href=&quot;https://en.wikipedia.org/wiki/Software_engineering&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;software engineering&lt;/a&gt;, &lt;strong&gt;dependency injection&lt;/strong&gt; is a technique whereby one object supplies the dependencies of another object. A dependency is an object that can be used (a &lt;a href=&quot;https://en.wikipedia.org/wiki/Service_(systems_architecture)&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;service&lt;/a&gt;). An injection is the passing of a dependency to a dependent object (a &lt;a href=&quot;https://en.wikipedia.org/wiki/Client_(computing)&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;client&lt;/a&gt;) that would use it.&lt;/p&gt;
    
    </summary>
    
    
      <category term="tips" scheme="https://duc.ninja/tags/tips/"/>
    
      <category term="swift" scheme="https://duc.ninja/tags/swift/"/>
    
      <category term="ios" scheme="https://duc.ninja/tags/ios/"/>
    
      <category term="til" scheme="https://duc.ninja/tags/til/"/>
    
  </entry>
  
  <entry>
    <title>Remove Old Simulators</title>
    <link href="https://duc.ninja/2017/11/052017/remove-old-simulators/"/>
    <id>https://duc.ninja/2017/11/052017/remove-old-simulators/</id>
    <published>2017-11-05T04:10:00.000Z</published>
    <updated>2019-09-28T02:53:12.641Z</updated>
    
    <content type="html"><![CDATA[<p>If you are an iOS developer, execute this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xcrun simctl delete unavailable</span><br></pre></td></tr></table></figure><a id="more"></a><p>It removes old simulators Xcode no longer use</p><p>Source: @dev_jac</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If you are an iOS developer, execute this:&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ xcrun simctl delete unavailable&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="xcode" scheme="https://duc.ninja/tags/xcode/"/>
    
      <category term="tips" scheme="https://duc.ninja/tags/tips/"/>
    
      <category term="til" scheme="https://duc.ninja/tags/til/"/>
    
  </entry>
  
  <entry>
    <title>Customizing the File Header Comment and Text Macros</title>
    <link href="https://duc.ninja/2017/11/042017/where-is-idetemplatemacros.plist-file/"/>
    <id>https://duc.ninja/2017/11/042017/where-is-idetemplatemacros.plist-file/</id>
    <published>2017-11-04T16:15:00.000Z</published>
    <updated>2019-09-28T02:53:12.643Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Text-macros"><a href="#Text-macros" class="headerlink" title="Text macros"></a>Text macros</h2><p>Text macros are symbols that are expanded in-place to the specified text. They are used in files and other places in Xcode, such as the header text for a new file or the project name. You can customize existing macros and add your own macros in a project, for all users of a project, or for all of Xcode. Customizing a macro requires two things:</p><a id="more"></a><ul><li><em>A plist named IDETemplateMacros.plist at an appropriate location.</em></li><li><em>An entry in IDETemplateMacros.plist for the text macro.</em></li><li> Xcode looks for the value of a text macro in the following locations and uses the first matching macro:<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Project<span class="built_in"> user </span>data -&gt; Project shared data -&gt; Workspace<span class="built_in"> user </span>data -&gt; Workspace shared data -&gt;<span class="built_in"> User </span>Xcode data</span><br></pre></td></tr></table></figure></li></ul><!-- ![](/assets/images/xcode-file-header-comment.png) --><h3 id="For-a-single-project-and-user"><a href="#For-a-single-project-and-user" class="headerlink" title="For a single project and user:"></a>For a single project and user:</h3><p>  <code>&lt;ProjectName&gt;.xcodeproj/xcuserdata/[username].xcuserdatad/IDETemplateMacros.plist</code></p><h3 id="For-all-team-members-in-a-single-project"><a href="#For-all-team-members-in-a-single-project" class="headerlink" title="For all team members in a single project:"></a>For all team members in a single project:</h3><p>  <code>&lt;ProjectName&gt;.xcodeproj/xcshareddata/IDETemplateMacros.plist</code></p><h3 id="For-all-projects-in-a-workspace-for-a-single-user"><a href="#For-all-projects-in-a-workspace-for-a-single-user" class="headerlink" title="For all projects in a workspace for a single user:"></a>For all projects in a workspace for a single user:</h3><p>  <code>&lt;WorkspaceName&gt;.xcworkspace/xcuserdata/[username].xcuserdatad/IDETemplateMacros.plist</code></p><h3 id="For-all-projects-in-a-workspace-for-all-team-members"><a href="#For-all-projects-in-a-workspace-for-all-team-members" class="headerlink" title="For all projects in a workspace for all team members:"></a>For all projects in a workspace for all team members:</h3><p>  <code>&lt;WorkspaceName&gt;.xcworkspace/xcshareddata/IDETemplateMacros.plist</code></p><h3 id="For-everything-you-work-on-regardless-of-project"><a href="#For-everything-you-work-on-regardless-of-project" class="headerlink" title="For everything you work on, regardless of project:"></a>For everything you work on, regardless of project:</h3><p>  <code>~/Library/Developer/Xcode/UserData/IDETemplateMacros.plist</code></p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  ___FILENAME___</span></span><br><span class="line"><span class="comment">//  ___PACKAGENAME___</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by ___FULLUSERNAME___ on ___DATE___.</span></span><br><span class="line"><span class="comment">//  ___COPYRIGHT___</span></span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure><p><img src="https://help.apple.com/xcode/mac/9.0/index.html?localePath=en.lproj#/dev7fe737ce0" alt="Text macros reference"></p><p>Source: Ole Begemann</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Text-macros&quot;&gt;&lt;a href=&quot;#Text-macros&quot; class=&quot;headerlink&quot; title=&quot;Text macros&quot;&gt;&lt;/a&gt;Text macros&lt;/h2&gt;&lt;p&gt;Text macros are symbols that are expanded in-place to the specified text. They are used in files and other places in Xcode, such as the header text for a new file or the project name. You can customize existing macros and add your own macros in a project, for all users of a project, or for all of Xcode. Customizing a macro requires two things:&lt;/p&gt;
    
    </summary>
    
    
      <category term="xcode" scheme="https://duc.ninja/tags/xcode/"/>
    
      <category term="tips" scheme="https://duc.ninja/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>What the Hell Is Swift 4 Access Control?</title>
    <link href="https://duc.ninja/2017/11/042017/what-the-hell-is-swift-4-access-control/"/>
    <id>https://duc.ninja/2017/11/042017/what-the-hell-is-swift-4-access-control/</id>
    <published>2017-11-04T14:45:00.000Z</published>
    <updated>2019-09-28T02:53:12.642Z</updated>
    
    <content type="html"><![CDATA[<p>In <a href="https://en.wikipedia.org/wiki/Object-oriented_programming" target="_blank" rel="noopener">object-oriented programming languages</a>, <em>access control</em> is a part of the apparatus of achieving <a href="https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)" target="_blank" rel="noopener">encapsulation</a>, one of four fundamentals of object-oriented programming. The goal is to establish a clear separation between interface (visible and accessible parts of the class) and implementation (internal representation and helper methods). - <a href="https://en.wikipedia.org/wiki/Access_control#In_object-oriented_programming" target="_blank" rel="noopener">Wikipedia</a></p><a id="more"></a><h3 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h3><p>In Swift 4 we have <strong>5 access levels</strong> like Swift 3, including <code>open</code>, <code>public</code>,  <code>internal</code>, <code>fileprivate</code> and <code>private</code>, but has some differents.</p><h3 id="Open"><a href="#Open" class="headerlink" title="Open"></a>Open</h3><p>You can access <code>open</code> classes and class members from <strong>any source file</strong> in the defining module or <strong>any module that imports that module</strong>. You can <strong>subclass</strong> an <code>open</code> class or <strong>override</strong> an <code>open</code> class member both within their defining module and <strong>any module</strong> that imports that module.</p><h3 id="Public"><a href="#Public" class="headerlink" title="Public"></a>Public</h3><p><code>public</code> allows the <strong>same access as open</strong> - any source file in any module - but has more restrictive subclassing and overriding. You can only subclass a <code>public</code> class within the same module. A <code>public</code> class member can only be overriden by subclasses in the same module. This is important if you are writing a framework.** If you want a user of that framework to be able to subclass a class or override a method you must make it** <code>open</code>.</p><h3 id="Internal"><a href="#Internal" class="headerlink" title="Internal"></a>Internal</h3><p><code>internal</code> allows use from any source file in the defining module but not from outside that module. This is generally the <strong>default access level</strong>.</p><h3 id="Fileprivate"><a href="#Fileprivate" class="headerlink" title="Fileprivate"></a>Fileprivate</h3><p>Restricts the use of an entity to its defining source file. You typically use fileprivate access to hide the implementation details of a specific piece of functionality when those details are used within an entire file.</p><h3 id="private"><a href="#private" class="headerlink" title="private"></a>private</h3><p>Private access restricts the use of an entity to the enclosing declaration, and to extensions of that declaration that are in the same file.</p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>Open access is the highest (least restrictive) access level and private access is the lowest (most restrictive) access level.</p><p>Useful link:<br><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0169-improve-interaction-between-private-declarations-and-extensions.md" target="_blank" rel="noopener">SE-0169</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In &lt;a href=&quot;https://en.wikipedia.org/wiki/Object-oriented_programming&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;object-oriented programming languages&lt;/a&gt;, &lt;em&gt;access control&lt;/em&gt; is a part of the apparatus of achieving &lt;a href=&quot;https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;encapsulation&lt;/a&gt;, one of four fundamentals of object-oriented programming. The goal is to establish a clear separation between interface (visible and accessible parts of the class) and implementation (internal representation and helper methods). - &lt;a href=&quot;https://en.wikipedia.org/wiki/Access_control#In_object-oriented_programming&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="swift" scheme="https://duc.ninja/tags/swift/"/>
    
      <category term="ios" scheme="https://duc.ninja/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>@Objc Warnings Upgrading to Swift 4</title>
    <link href="https://duc.ninja/2017/11/042017/objc-warnings-upgrading-to-swift-4/"/>
    <id>https://duc.ninja/2017/11/042017/objc-warnings-upgrading-to-swift-4/</id>
    <published>2017-11-04T14:15:00.000Z</published>
    <updated>2019-09-28T02:53:12.641Z</updated>
    
    <content type="html"><![CDATA[<p>Open a Swift 3 project in Xcode 9 and it will warn you that you can upgrade to Swift 4. If you accept the invite you end up with another warning that Swift 4 mode deprecates the Swift 3 <code>@objc</code> inference rules. What is this scary sounding warning and how do you make it go away?</p><a id="more"></a><h3 id="What-Is-objc-Inference"><a href="#What-Is-objc-Inference" class="headerlink" title="What Is @objc Inference?"></a>What Is @objc Inference?</h3><p>I’ll confess that <code>@objc</code> inference was not something I spent a lot of time thinking about before Swift 4 changed the rules. You can add <code>@objc</code> to Swift properties or methods to make them accessibile from Objective-C code. To make life easier the compiler also has some rules for when it will infer the <code>@objc</code> for you.</p><p>The Swift 3 compiler is generous about adding <code>@objc</code> even when you may not need it. This convenience comes at a cost of larger binaries as each of those methods gets some extra code to map between the Swift and Objective-C calling conventions.</p><p>The Swift 4 compiler takes a more conservative approach and only infers <code>@objc</code> in limited cases. For example, when overriding an <code>@objc</code> method or implementing an <code>@objc</code> protocol. So you don’t need to worry about marking all your <code>UITableViewDataSource</code> methods with <code>@objc</code>. You also don’t need to add <code>@objc</code> with <code>@IBAction</code>, <code>@IBOutlet</code>, <code>@IBInspectable</code> or <code>@NSManaged</code>.</p><p>This makes the rules simpler to understand but means you have some work to do when upgrading to Swift 4.</p><h3 id="Upgrading-To-Swift-4"><a href="#Upgrading-To-Swift-4" class="headerlink" title="Upgrading To Swift 4"></a>Upgrading To Swift 4</h3><p>When you open a Swift 3 project in Xcode 9 it greets you with a build warning - “Conversion to Swift 4 is available”:</p><p><img src="/assets/images/2017-10-26-001.png" alt></p><p>It is annoying to have a build warning but you are not forced to upgrade to Swift 4. Xcode 9 supports both Swift 3.2 and Swift 4 through a build setting so you can migrate one target at a time.</p><p><img src="/assets/images/2017-10-27-001.png" alt><br>Assuming you want to upgrade to Swift 4, clicking the build warning starts the Xcode migrator so you can choose which targets to upgrade. You have two choices for the migration:<br><img src="/assets/images/2017-10-26-002.png" alt></p><ul><li>Minimize Inference: This is the recommended approach. The migrator will only add <code>@objc</code> to your code in the obvious places such as methods that are the target for a <code>#selector</code>. This should give you a smaller binary but you have some extra manual work to do to finish the migration (see below).</li><li>Match Swift 3 Behavior: This approach adds <code>@objc</code> to your code anywhere the Swift 3 compiler would have inferred it. It is a safe choice but by sprinkling <code>@objc</code> throughout your code you will not see the smaller binary size.</li></ul><p>If you take the recommended approach Xcode will remind you that you have some extra work to do. This is also the only time you get a link to the <a href="https://help.apple.com/xcode/mac/9.0/index.html?localePath=en.lproj#/deve838b19a1" target="_blank" rel="noopener">migration guide</a>. You can also find this guide in the Xcode help if you look under the “Work in Xcode” section:<br><img src="/assets/images/2017-10-26-003.png" alt></p><p>Once Xcode has done its best it leaves you with this worrying warning message:<br><img src="/assets/images/2017-10-26-004.png" alt></p><p>If you check the build settings you will see that the Swift 3 rules for <code>@objc</code>inference are still in effect:<br><img src="/assets/images/2017-10-28-001.png" alt></p><p>This is helpful as you will get build time and run time warnings any time your code is missing an <code>@objc</code> that the Swift 3 rules would have inferred. So now is a good time to run your tests and check the logs.</p><h3 id="Manual-Fixing-objc-Inference"><a href="#Manual-Fixing-objc-Inference" class="headerlink" title="Manual Fixing @objc Inference"></a>Manual Fixing @objc Inference</h3><p>If you are working with a pure Swift project the migrator seems to do a pretty good job of adding <code>@objc</code> where you need it. For example, when you use a method with a <code>#selector</code>:</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">button.addTarget(self, action: <span class="function"><span class="keyword">#</span><span class="title">selector</span><span class="params">(<span class="variable">doAction</span>(<span class="variable">sender</span>:)</span></span>),</span><br><span class="line">                          for: .touchUpInside)</span><br></pre></td></tr></table></figure><p>Since it is <code>UIKit</code> code that calls the <code>doAction</code> method it must be accessible to the Objective-C runtime. Luckily the migrator adds the <code>@objc</code> for you:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">doAction</span><span class="params">(sender: UIButton)</span></span> &#123;</span><br><span class="line">    <span class="comment">// Do action here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If you are working with a mixed Swift and Objective-C project you are likely to have more work to do. For example, suppose I had this Swift class:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyModel</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> someFlag = <span class="literal">false</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">doSomething</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"doing something"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Under the old Swift 3 rules properties and methods of <code>NSObject</code> subclasses were accessibile from Objective-C (unless they were private).</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">self.model.someFlag</span> = <span class="literal">YES</span><span class="comment">;</span></span><br><span class="line"><span class="section">[self.model doSomething]</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><p>In Swift 4 mode this is no longer the case and you should see build and run time warnings prompting you to add <code>@objc</code>:<br><img src="/assets/images/2017-10-28-002.png" alt></p><p>I can fix the warnings by adding <code>@objc</code> to both the property and method declaration:</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">MyModel</span>: <span class="selector-tag">NSObject</span> &#123;</span><br><span class="line">  <span class="variable">@objc</span> var someFlag = false</span><br><span class="line">  <span class="variable">@objc</span> func doSomething() &#123;</span><br><span class="line">    <span class="selector-tag">print</span>(<span class="string">"doing something"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If you are sure that you want to expose all properties and methods of a class to the Objective-C runtime you can use the <code>@objcMembers</code> annotation:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@objc</span>Members</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyModel</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> someFlag = <span class="literal">false</span>         <span class="comment">// @objc</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">doSomething</span><span class="params">()</span></span> &#123;         <span class="comment">// @objc</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"doing something"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using <code>@objcMembers</code> also applies <code>@objc</code> by default to any extensions of the class. It can be convenient to collect methods that should be accessibile from Objective-C in an <code>@objc</code> extension. So another way to write the above would be:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyModel</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">  <span class="meta">@objc</span> <span class="keyword">var</span> someFlag = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@objc</span> <span class="class"><span class="keyword">extension</span> <span class="title">MyModel</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">doSomething</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"doing something"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note: I cannot move <code>someFlag</code> to the extension as they cannot contain stored properties.</p><p>You can also use <code>@nonobjc</code> to override a default <code>@objc</code>. For example in an <code>@objc</code> extension:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@objc</span> <span class="class"><span class="keyword">extension</span> <span class="title">MyModel</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">doSomething</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"doing something"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@nonobjc</span> <span class="function"><span class="keyword">func</span> <span class="title">doNothing</span><span class="params">()</span></span> &#123; <span class="comment">// Not accessibile from objc</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Completing-The-Migration"><a href="#Completing-The-Migration" class="headerlink" title="Completing The Migration"></a>Completing The Migration</h3><p>Once you are sure you have fixed everything you should disable the Swift 3 <code>@objc</code> inference rules in the build settings for each target:<br><img src="/assets/images/2017-10-29-001.png" alt></p><p>With the setting switched to <code>Default</code> the warning should go away and you can get back to work.</p><p>Source: <a href="https://useyourloaf.com" target="_blank" rel="noopener">useyourloaf</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Open a Swift 3 project in Xcode 9 and it will warn you that you can upgrade to Swift 4. If you accept the invite you end up with another warning that Swift 4 mode deprecates the Swift 3 &lt;code&gt;@objc&lt;/code&gt; inference rules. What is this scary sounding warning and how do you make it go away?&lt;/p&gt;
    
    </summary>
    
    
      <category term="tips" scheme="https://duc.ninja/tags/tips/"/>
    
      <category term="swift" scheme="https://duc.ninja/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Injecting forEach Into Chained Method Calls</title>
    <link href="https://duc.ninja/2017/11/042017/chained-foreach/"/>
    <id>https://duc.ninja/2017/11/042017/chained-foreach/</id>
    <published>2017-11-04T13:00:00.000Z</published>
    <updated>2019-09-28T02:53:12.639Z</updated>
    
    <content type="html"><![CDATA[<p>A few weeks ago a reader <a href="https://twitter.com/jasonalexzurita/status/915972380685516800" target="_blank" rel="noopener">pointed out an error</a> in <a href="https://oleb.net/advanced-swift/" target="_blank" rel="noopener"><em>Advanced Swift</em></a>. We had written this about Swift’s <a href="https://developer.apple.com/documentation/swift/sequence/2906738-foreach" target="_blank" rel="noopener"><code>forEach</code></a> method:</p><a id="more"></a><blockquote><p>And it [<code>forEach</code>] really shines as part of a sequence of chained operations. For instance, imagine you’ve chained several calls to <code>map</code> and <code>filter</code> in a single statement, and during debugging you want to log the intermediate values somewhere in the middle of the chain. Inserting a <code>forEach</code> step at the desired position is probably the quickest way to do this.</p></blockquote><p>I imagine there was a lot of wishful thinking at play when we wrote this because it sounds like a truly useful feature (and it’s something you can’t do with a<code>for</code> - <code>in</code> loop). Alas, it’s completely wrong — you can’t use <code>forEach</code> in the middle of a chain like this!</p><h1 id="How-I’d-like-it-to-work"><a href="#How-I’d-like-it-to-work" class="headerlink" title="How I’d like it to work"></a>How I’d like it to work</h1><p>To illustrate the idea with a code sample, let’s say we have chained a number of operations on a sequence:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let numbers = <span class="number">1.</span>.<span class="number">.10</span></span><br><span class="line">let sumOfSquaredEvenNumbers = numbers</span><br><span class="line">    .filter &#123; $<span class="number">0</span> % <span class="number">2</span> == <span class="number">0</span>&#125;</span><br><span class="line">    .map &#123; $<span class="number">0</span> * $<span class="number">0</span> &#125;</span><br><span class="line">    .reduce(<span class="number">0</span>, +)</span><br><span class="line"><span class="comment">// → 220</span></span><br></pre></td></tr></table></figure><p>Now suppose we wanted to check that each of the operations in the chain does what we expect. It’d be really neat if we could insert a call like <code>.forEach { print($0) }</code>somewhere in the middle of that chain to inspect the elements that come out of the <code>filter</code> and/or <code>map</code> operations.</p><p>Why doesn’t <code>forEach</code> support this? To appear in the middle of the chain, it would have to return some kind of <a href="https://developer.apple.com/documentation/swift/sequence" target="_blank" rel="noopener"><code>Sequence</code></a> such that the next operation in the chain has something to operate. Because the return type of <code>forEach</code> is <code>()</code>, it can only appear at the end of the chain.</p><h1 id="A-forEach-variant-that-returns-Self"><a href="#A-forEach-variant-that-returns-Self" class="headerlink" title="A forEach variant that returns Self"></a>A <code>forEach</code> variant that returns <code>Self</code></h1><p>Fortunately, it’s not difficult to add this functionality. All we need is a method on <code>Sequence</code>that calls the passed-in function once for each element (like <code>forEach</code>) and then returns itself so that the chain can continue as if nothing happened. In other words, the method’s return type should be <code>Self</code>. I chose to call it <code>forEachPerform</code> to avoid ambiguities between it and the original <code>forEach</code> during type checking:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Sequence</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// Perform a side effect for each element in `self`.</span></span><br><span class="line">    <span class="meta">@discardableResult</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">forEachPerform</span><span class="params">(<span class="number">_</span> body: <span class="params">(Element)</span></span></span> <span class="keyword">throws</span> -&gt; ())</span><br><span class="line">        <span class="keyword">rethrows</span> -&gt; <span class="type">Self</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span> forEach(body)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Unlike <code>forEach</code>, we can insert this method into the chain like so:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let sumOfSquaredEvenNumbers = numbers</span><br><span class="line">    .filter &#123; $<span class="number">0</span> % <span class="number">2</span> == <span class="number">0</span>&#125;</span><br><span class="line">    .forEachPerform &#123; print($<span class="number">0</span>) &#125;</span><br><span class="line">    .map &#123; $<span class="number">0</span> * $<span class="number">0</span> &#125;</span><br><span class="line">    .reduce(<span class="number">0</span>, +)</span><br><span class="line"><span class="comment">/* Prints:</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>I also found it useful to add a second method, which calls its function argument only once for the entire sequence and not once per element:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Sequence</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// Perform a side effect.</span></span><br><span class="line">    <span class="meta">@discardableResult</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">perform</span><span class="params">(<span class="number">_</span> body: <span class="params">(<span class="keyword">Self</span>)</span></span></span> <span class="keyword">throws</span> -&gt; ())</span><br><span class="line">        <span class="keyword">rethrows</span> -&gt; <span class="type">Self</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span> body(<span class="keyword">self</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This is perfect for logging each intermediate result:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sumOfSquaredEvenNumbers = numbers</span><br><span class="line">    .<span class="built_in">filter</span> &#123; $<span class="number">0</span> % <span class="number">2</span> == <span class="number">0</span>&#125;</span><br><span class="line">    .perform &#123; <span class="keyword">print</span>(<span class="string">"After filter: \($0)"</span>) &#125;</span><br><span class="line">    .<span class="keyword">map</span> &#123; $<span class="number">0</span> * $<span class="number">0</span> &#125;</span><br><span class="line">    .perform &#123; <span class="keyword">print</span>(<span class="string">"After map: \($0)"</span>) &#125;</span><br><span class="line">    .reduce(<span class="number">0</span>, +)</span><br><span class="line">/* <span class="keyword">Print</span><span class="variable">s:</span></span><br><span class="line">After <span class="built_in">filter</span>: [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>]</span><br><span class="line">After <span class="keyword">map</span>: [<span class="number">4</span>, <span class="number">16</span>, <span class="number">36</span>, <span class="number">64</span>, <span class="number">100</span>]</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h1 id="Self-consuming-sequences"><a href="#Self-consuming-sequences" class="headerlink" title="Self-consuming sequences"></a>Self-consuming sequences</h1><p>The new methods return <code>self</code> unchanged, so inserting them into a chain should be totally transparent. But note that the <code>Sequence</code> protocol makes no guarantees that implementations produce the same sequence of elements when iterated repeatedly.</p><p>Most conforming types obviously do guarantee this (like <a href="https://developer.apple.com/documentation/swift/array" target="_blank" rel="noopener"><code>Array</code></a>), but suppose you have a <code>Sequence</code> that represents an incoming byte stream from a network socket: calling <code>forEachPerform</code> or <code>perform</code> on it will consume the sequence, leaving no bytes to process for subsequent operations.</p><p>If that’s a problem for you, you could either have the methods return an <code>Array&lt;Element&gt;</code>(thereby implicitly turning destructive sequences into repeatable ones) or to add the new methods on <a href="https://developer.apple.com/documentation/swift/collection" target="_blank" rel="noopener"><code>Collection</code></a> (which does guarantee non-destructive iteration).</p><h1 id="Making-it-lazy"><a href="#Making-it-lazy" class="headerlink" title="Making it lazy"></a>Making it lazy</h1><p>Another not-quite-transparent side effect of <code>forEachPerform</code> is that it doesn’t work well with <em>lazy sequences</em>.</p><p>The idea of a lazy sequence is that it should defer all work to produce the next element until the last possible moment, i.e. when an operation further down the chain actually requests that element. By looping over each element in the implementation of <code>forEachPerform</code>, we destroy any laziness the incoming sequence may have had.</p><p>To preserve the laziness, we can define our own lazy iterator and sequence types, named <code>LazyForEachIterator</code> and <code>LazyForEachSequence</code>. These work exactly like similar types in the standard library: instead of executing the side effect function immediately, they <em>store*the function and the incoming sequence, and then they *wait</em> until someone requests the next element. Only then will they in turn ask the base sequence for <em>its</em> next element and process it.</p><p>The code looks like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LazyForEachIterator</span>&lt;<span class="title">Base</span>: <span class="title">IteratorProtocol</span>&gt;</span></span><br><span class="line"><span class="class">    : <span class="title">IteratorProtocol</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">next</span><span class="params">()</span></span> -&gt; <span class="type">Base</span>.<span class="type">Element?</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> nextElement = base.next() <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        perform(nextElement)</span><br><span class="line">        <span class="keyword">return</span> nextElement</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> base: <span class="type">Base</span></span><br><span class="line">    <span class="keyword">let</span> perform: (<span class="type">Base</span>.<span class="type">Element</span>) -&gt; ()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LazyForEachSequence</span>&lt;<span class="title">Base</span>: <span class="title">Sequence</span>&gt;</span></span><br><span class="line"><span class="class">    : <span class="title">LazySequenceProtocol</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeIterator</span><span class="params">()</span></span></span><br><span class="line">        -&gt; <span class="type">LazyForEachIterator</span>&lt;<span class="type">Base</span>.<span class="type">Iterator</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">LazyForEachIterator</span>(</span><br><span class="line">            base: base.makeIterator(),</span><br><span class="line">            perform: perform)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> base: <span class="type">Base</span></span><br><span class="line">    <span class="keyword">let</span> perform: (<span class="type">Base</span>.<span class="type">Element</span>) -&gt; ()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Notice that our sequence type conforms to <a href="https://developer.apple.com/documentation/swift/lazysequenceprotocol" target="_blank" rel="noopener"><code>LazySequenceProtocol</code></a>. This protocol inherits from <code>Sequence</code>. Its purpose is to provide lazy implementations of normally-eager operations.</p><p>When you call a method like <code>map</code> on a value that conforms to <code>LazySequenceProtocol</code>, the compiler will favor the lazy variant of <code>map</code> over the non-lazy version because one of Swift’s type inference rules is to pick the most specific overload that works under the given constraints.</p><p>To achieve the same effect for our method, we can extend <code>LazySequenceProtocol</code> with a variant of <code>forEachPerform</code> that returns a lazy sequence:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">LazySequenceProtocol</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">forEachPerform</span><span class="params">(<span class="number">_</span> body: @escaping <span class="params">(Element)</span></span></span> -&gt; ())</span><br><span class="line">        -&gt; <span class="type">LazyForEachSequence</span>&lt;<span class="type">Self</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">LazyForEachSequence</span>(base: <span class="keyword">self</span>,</span><br><span class="line">            perform: body)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This method differs in several aspects from the non-lazy version:</p><ul><li>The function parameter must be <code>@escaping</code> because we’re storing it.</li><li>It doesn’t support throwing functions because that wouldn’t work with lazy evaluation.</li><li>The return value is not marked as discardable because a lazy operation that no one ever executes later doesn’t make any sense.</li></ul><p>But the most important charateristic is what we discussed above: the method doesn’t perform any work except storing the base sequence and the function for later.</p><p>With this in place, <code>forEachPerform</code> will preserve the laziness of a sequence (notice the <code>.lazy</code> call):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> largeNumbersSquared = numbers</span><br><span class="line">    .lazy</span><br><span class="line">    .filter &#123; <span class="variable">$0</span> &gt;= 5 &#125;</span><br><span class="line">    .forEachPerform &#123; <span class="built_in">print</span>(<span class="string">"After filter: \(<span class="variable">$0</span>)"</span>) &#125;</span><br><span class="line">    .map &#123; <span class="variable">$0</span> * <span class="variable">$0</span> &#125;</span><br><span class="line">// Prints nothing</span><br></pre></td></tr></table></figure><p><em>Note: Actually, this exact code produces a compile error in Swift 4.0: “ambiguous use of ‘forEachPerform’”. It only works as shown here if I change the return type of Sequence.forEachPerform from Self to [Element]. I’m not quite sure why that is. As a workaround, you could give LazySequenceProtocol.forEachPerform a unique name.</em></p><p>Only when we access elements from the lazy sequence will the side effects for those elements be printed:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Access the first two elements</span></span><br><span class="line"><span class="function"><span class="title">Array</span><span class="params">(largeNumbersSquared.prefix(<span class="number">2</span>)</span></span>)</span><br><span class="line"><span class="comment">/* Prints:</span></span><br><span class="line"><span class="comment">After filter: 5</span></span><br><span class="line"><span class="comment">After filter: 6</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// → [25, 36]</span></span><br></pre></td></tr></table></figure><p>Source: <a href="https://oleb.net/" target="_blank" rel="noopener">Ole Begemann</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A few weeks ago a reader &lt;a href=&quot;https://twitter.com/jasonalexzurita/status/915972380685516800&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pointed out an error&lt;/a&gt; in &lt;a href=&quot;https://oleb.net/advanced-swift/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;em&gt;Advanced Swift&lt;/em&gt;&lt;/a&gt;. We had written this about Swift’s &lt;a href=&quot;https://developer.apple.com/documentation/swift/sequence/2906738-foreach&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;forEach&lt;/code&gt;&lt;/a&gt; method:&lt;/p&gt;
    
    </summary>
    
    
      <category term="tips" scheme="https://duc.ninja/tags/tips/"/>
    
      <category term="swift" scheme="https://duc.ninja/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Use didSet During Initialling an Object in Swift 4</title>
    <link href="https://duc.ninja/2017/11/042017/use-didset-when-initialling-an-object-in-swift/"/>
    <id>https://duc.ninja/2017/11/042017/use-didset-when-initialling-an-object-in-swift/</id>
    <published>2017-11-04T07:00:00.000Z</published>
    <updated>2019-09-28T02:53:12.642Z</updated>
    
    <content type="html"><![CDATA[<p>By default <code>didSet</code> of a property  don’t called during init, so we can use <code>defer</code> to fix that issue.</p><a id="more"></a><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VideoPlayerController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> idle</span><br><span class="line">        <span class="keyword">case</span> loading(<span class="type">URL</span>, <span class="type">Data</span>)</span><br><span class="line">        <span class="keyword">case</span> playing(<span class="type">Video</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> state = <span class="type">State</span>.idle &#123;</span><br><span class="line">        <span class="keyword">didSet</span> &#123; updateVideoView() &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(state initialState: <span class="type">State</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(nibName: <span class="literal">nil</span>, bundle: <span class="literal">nil</span>)</span><br><span class="line">        <span class="comment">// By deferring the state assignment, our property observer is</span></span><br><span class="line">        <span class="comment">// invoked, so we don't need to call updateVideoView() manually.</span></span><br><span class="line">        <span class="keyword">defer</span> &#123; state = initialState &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;By default &lt;code&gt;didSet&lt;/code&gt; of a property  don’t called during init, so we can use &lt;code&gt;defer&lt;/code&gt; to fix that issue.&lt;/p&gt;
    
    </summary>
    
    
      <category term="tips" scheme="https://duc.ninja/tags/tips/"/>
    
      <category term="swift" scheme="https://duc.ninja/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Convert Between UTC and Device Timezone in Swift 4</title>
    <link href="https://duc.ninja/2017/10/222017/convert-utc-local-swift4/"/>
    <id>https://duc.ninja/2017/10/222017/convert-utc-local-swift4/</id>
    <published>2017-10-22T13:16:34.000Z</published>
    <updated>2019-09-28T02:53:12.639Z</updated>
    
    <content type="html"><![CDATA[<p>In this article we are going to convert <strong>UTC Date</strong> format to <strong>Current device date format</strong>.</p><p><strong>UTC</strong> is the time standard commonly used across the world. The world’s timing centers have agreed to keep their time scales closely synchronized - or coordinated - therefore the name <strong>Coordinated Universal Time</strong>.</p><a id="more"></a><h2 id="UTC-to-Local"><a href="#UTC-to-Local" class="headerlink" title="UTC to Local:"></a>UTC to Local:</h2><p>Use the following method for converting:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UTCToLocal</span><span class="params">(UTCDateString: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> dateFormatter = <span class="type">DateFormatter</span>()</span><br><span class="line">    dateFormatter.dateFormat = <span class="string">"yyyy-MM-dd HH:mm:ss"</span> <span class="comment">//Input Format</span></span><br><span class="line">    dateFormatter.timeZone = <span class="type">NSTimeZone</span>(name: <span class="string">"UTC"</span>) <span class="keyword">as</span> <span class="type">TimeZone!</span></span><br><span class="line">    <span class="keyword">let</span> <span class="type">UTCDate</span> = dateFormatter.date(from: <span class="type">UTCDateString</span>)</span><br><span class="line">    dateFormatter.dateFormat = <span class="string">"yyyy-MMM-dd hh:mm:ss"</span> <span class="comment">// Output Format</span></span><br><span class="line">    dateFormatter.timeZone = <span class="type">TimeZone</span>.current</span><br><span class="line">    <span class="keyword">let</span> <span class="type">UTCToCurrentFormat</span> = dateFormatter.string(from: <span class="type">UTCDate!</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="type">UTCToCurrentFormat</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Usage:</p><p>Call above method as follow:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dateString = <span class="string">"2017-10-10 9:56:25"</span></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">self</span>.<span class="type">UTCToLocal</span>(<span class="type">UTCDateString</span>: dateString)</span><br></pre></td></tr></table></figure><p>//output date should be <code>&#39;2017-10-10 15:26:25&#39;</code><br>In above method we can customize date formats as per our usage. But the input date format must be same format as input date string.</p><h2 id="Local-to-UTC"><a href="#Local-to-UTC" class="headerlink" title="Local to UTC:"></a>Local to UTC:</h2><p>Use the following method for converting:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">localToUTC</span><span class="params">(date:String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> dateFormatter = <span class="type">DateFormatter</span>()</span><br><span class="line">    dateFormatter.dateFormat = <span class="string">"yyyy-MM-dd HH:mm:ss"</span></span><br><span class="line">    dateFormatter.calendar = <span class="type">NSCalendar</span>.current</span><br><span class="line">    dateFormatter.timeZone = <span class="type">TimeZone</span>.current</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> dt = dateFormatter.date(from: date)</span><br><span class="line">    dateFormatter.timeZone = <span class="type">TimeZone</span>(abbreviation: <span class="string">"UTC"</span>)</span><br><span class="line">    dateFormatter.dateFormat = <span class="string">"yyyy-MMM-dd hh:mm:ss"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dateFormatter.string(from: dt!)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Usage:</p><p>Call above method as follow:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dateString = <span class="string">"2017-10-10 15:56:25"</span></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">self</span>.localToUTC(date: dateString)</span><br></pre></td></tr></table></figure><p>//output date should be <code>&#39;2017-10-10 09:26:25&#39;</code></p><p>Source: <a href="https://iosrevisited.blogspot.in/2017/10/convert-utc-local-swift4.html" target="_blank" rel="noopener">iosrevisited</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In this article we are going to convert &lt;strong&gt;UTC Date&lt;/strong&gt; format to &lt;strong&gt;Current device date format&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UTC&lt;/strong&gt; is the time standard commonly used across the world. The world’s timing centers have agreed to keep their time scales closely synchronized - or coordinated - therefore the name &lt;strong&gt;Coordinated Universal Time&lt;/strong&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="tips" scheme="https://duc.ninja/tags/tips/"/>
    
      <category term="swift" scheme="https://duc.ninja/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Measuring Swift Compile Times in Xcode 9</title>
    <link href="https://duc.ninja/2017/10/012017/measuring-swift-compile-times-in-xcode-9/"/>
    <id>https://duc.ninja/2017/10/012017/measuring-swift-compile-times-in-xcode-9/</id>
    <published>2017-10-01T07:36:34.000Z</published>
    <updated>2019-09-28T02:53:12.640Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Using-Xfrontend-Swift-compiler-flags"><a href="#Using-Xfrontend-Swift-compiler-flags" class="headerlink" title="Using -Xfrontend Swift compiler flags"></a>Using -Xfrontend Swift compiler flags</h2><p>The Swift type-checker remains <a href="https://www.cocoawithlove.com/blog/2016/07/12/type-checker-issues.html" target="_blank" rel="noopener">a performance bottleneck</a> for compile times, though it has <a href="https://github.com/apple/swift/search?utf8=%E2%9C%93&q=type+checker+improve&type=Commits" target="_blank" rel="noopener">improved</a><a href="https://github.com/apple/swift/search?utf8=%E2%9C%93&q=type+checker+performance&type=Commits" target="_blank" rel="noopener">tremendously</a> over the past two years. You could even say the type-checker has gone from being <a href="https://spin.atomicobject.com/2016/04/26/swift-long-compile-time/" target="_blank" rel="noopener">drunk</a> to <a href="https://github.com/apple/swift/commit/2cdd7d64e1e2add7bcfd5452d36e7f5fc6c86a03" target="_blank" rel="noopener">sober</a>.</p><a id="more"></a><p>To help users debug these issues, awhile back <a href="https://github.com/apple/swift/commit/18c75928639acf0ccf0e1fb6729eea75bc09cbd5" target="_blank" rel="noopener">Jordan Rose added</a> a frontend Swift compiler flag that would emit warnings in Xcode for functions that took too long to compile, or rather took too long to type-check. In Xcode 9, there’s a new, similar flag for checking expressions.</p><h3 id="About-warn-long-function-bodies"><a href="#About-warn-long-function-bodies" class="headerlink" title="About -warn-long-function-bodies"></a>About <code>-warn-long-function-bodies</code></h3><p><a href="http://irace.me/swift-profiling" target="_blank" rel="noopener">Bryan Irace</a> and <a href="http://khanlou.com/2016/12/guarding-against-long-compiles/" target="_blank" rel="noopener">Soroush Khanlou</a> originally wrote about the <code>-warn-long-function-bodies</code> flag when it was first introduced. You could specify a threshold in milliseconds that would trigger a warning. For example: <code>-Xfrontend -warn-long-function-bodies=100</code> would trigger a warning in Xcode for any function that took longer than 100ms to type-check. This was always considered an experimental flag, as Jordan notes in his original <a href="https://github.com/apple/swift/commit/18c75928639acf0ccf0e1fb6729eea75bc09cbd5" target="_blank" rel="noopener">commit</a>: <em>As a frontend option, this is UNSUPPORTED and may be removed without notice at any future date.</em> As far as I can tell, this is still the case. However, this flag still works in Xcode 9 and I haven’t seen any discussion about removing it.</p><h3 id="About-warn-long-expression-type-checking"><a href="#About-warn-long-expression-type-checking" class="headerlink" title="About -warn-long-expression-type-checking"></a>About <code>-warn-long-expression-type-checking</code></h3><p>In Xcode 9, there is a new, similar flag for type-checking expressions, not just functions. However, this time the flag made an appearance in the <em>official</em> Xcode 9 GM <a href="https://download.developer.apple.com/Developer_Tools/Xcode_9_GM_seed_build_9A235/Xcode_9_GM_seed_Release_Notes.pdf" target="_blank" rel="noopener">release notes</a>:</p><blockquote><p>The compiler can now warn about individual expressions that take a long time to type check.</p><p>To enable this warning, go the Build Settings, “Swift Compiler - Custom Flags”, “Other Swift Flags”, and add: <code>-Xfrontend -warn-long-expression-type-checking=&lt;limit&gt;</code> where <code>&lt;limit&gt;</code> is the lower limit of the number of milliseconds that an expression must take to type check in order for the warning to be emitted.</p><p>This allows users to identify those expressions that are contributing significantly to build times and rework them by splitting them up or adding type annotations to attempt to reduce the time spent on those expressions. (32619658)</p></blockquote><p>This time, you can thank <a href="https://github.com/apple/swift/pull/10214" target="_blank" rel="noopener">Mark Lacey</a> for the flag. (<a href="https://github.com/apple/swift/pull/10215" target="_blank" rel="noopener">pull request for Swift 4</a>)</p><h3 id="Using-these-flags-to-improve-compile-times"><a href="#Using-these-flags-to-improve-compile-times" class="headerlink" title="Using these flags to improve compile times"></a>Using these flags to improve compile times</h3><p>As mentioned, after you add these flags you will start getting warnings. Keep in mind that if the threshold is too low, for example 10ms, then you will get <strong>a ton</strong> of warnings that cannot be fixed. Experiment with these threshold values and adjust as needed. I suggest starting at <code>200</code> and tuning from there. If your code base is large, it might make more sense to use a higher value for your project (say <code>500</code>) and try to decrease it over time. Otherwise, you’ll be spending <strong>a lot</strong> of time trying to get all functions and expressions to compile in under 200ms. Also, I recommend setting these flags only for <code>DEBUG</code> build configurations.</p><p>There are two common scenarios where Xcode will start emitting warnings with these flags: (1) very complex expressions or functions, and (2) expressions that omit explicit types and rely on <a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Types.html" target="_blank" rel="noopener">type inference</a>. To silence the warnings — and thus improve compile times — try breaking up expressions into smaller steps with intermediate variables, and adding explicit types to variable declarations and closure parameters. The code may not look as elegant after these changes, but what’s more important to you and your team?</p><p><img src="/assets/images/xcode-front-end-flags.png" alt></p><h3 id="A-temporary-solution"><a href="#A-temporary-solution" class="headerlink" title="A temporary solution"></a>A temporary solution</h3><p>Using these flags is obviously a temporary (and kind of hacky) solution to improving compile times. It only treats the symptoms rather than the cause, but it is better than nothing. As I said before, the Swift team is well aware of the problems and they are working hard to address them. Every single Swift release is getting better and I’m sure Swift 5 will bring even more improvements.</p><p>I’m hoping using these flags — and having to change your code to improve compilation times — will soon be a hack of the past. Eventually it will be, we just don’t know when.</p><p>Source: [jessesquires.com][theswiftpost.co]</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Using-Xfrontend-Swift-compiler-flags&quot;&gt;&lt;a href=&quot;#Using-Xfrontend-Swift-compiler-flags&quot; class=&quot;headerlink&quot; title=&quot;Using -Xfrontend Swift compiler flags&quot;&gt;&lt;/a&gt;Using -Xfrontend Swift compiler flags&lt;/h2&gt;&lt;p&gt;The Swift type-checker remains &lt;a href=&quot;https://www.cocoawithlove.com/blog/2016/07/12/type-checker-issues.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;a performance bottleneck&lt;/a&gt; for compile times, though it has &lt;a href=&quot;https://github.com/apple/swift/search?utf8=%E2%9C%93&amp;q=type+checker+improve&amp;type=Commits&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;improved&lt;/a&gt;&lt;a href=&quot;https://github.com/apple/swift/search?utf8=%E2%9C%93&amp;q=type+checker+performance&amp;type=Commits&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;tremendously&lt;/a&gt; over the past two years. You could even say the type-checker has gone from being &lt;a href=&quot;https://spin.atomicobject.com/2016/04/26/swift-long-compile-time/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;drunk&lt;/a&gt; to &lt;a href=&quot;https://github.com/apple/swift/commit/2cdd7d64e1e2add7bcfd5452d36e7f5fc6c86a03&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;sober&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="xcode" scheme="https://duc.ninja/tags/xcode/"/>
    
      <category term="tips" scheme="https://duc.ninja/tags/tips/"/>
    
  </entry>
  
</feed>
