<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Duc Ninja</title>
  
  <subtitle>I&#39;m an iOS engineer and a ninja as well.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://duc.ninja/"/>
  <updated>2019-11-26T14:43:06.014Z</updated>
  <id>https://duc.ninja/</id>
  
  <author>
    <name>Duc Ninja</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Allow App Created in Xcode 11 to Run on iOS 12 and Lower</title>
    <link href="https://duc.ninja/2019/11/262019/nov-26-xcode11-ios12/"/>
    <id>https://duc.ninja/2019/11/262019/nov-26-xcode11-ios12/</id>
    <published>2019-11-26T09:35:00.000Z</published>
    <updated>2019-11-26T14:43:06.014Z</updated>
    
    <content type="html"><![CDATA[<p>If you create a new app in Xcode 11 and try to run it on an iOS 12 device or lower, you will get a bunch of errors :</p><p><img src="/assets/images/xcode11-ios12.assets/spookyError.png" alt="errors"></p><a id="more"></a><p>Notice that most of these errors are related to the <strong>UIScene</strong> class and the <strong>SceneDelegate.swift</strong> file, these are related to the <strong>multi-window feature</strong> introduced in iOS 13, which allows multiple windows of an app to be opened in iPad. As iOS 12 and earlier don’t have these feature, we will get these error messages when trying to compile.</p><p>We will try to resolve these errors step by step in this article.</p><p>You can save the hassle by setting deployment target to iOS 13 and above, and ditch support for iOS 12 and below 😈. But keep in mind that <strong>half of the iOS devices</strong> in circulation <strong>are not</strong> using iOS 13 as of mid October 2019, according to <a href="https://developer.apple.com/support/app-store/" target="_blank" rel="noopener">Apple’s report</a> :</p><p><img src="/assets/images/xcode11-ios12.assets/iOSPercentage.png" alt="iOS Percentage"></p><p>If you are dropping support for iOS 12 and below, you are denying half of the iOS users to use your app! 😱</p><h2 id="Update-deployment-target"><a href="#Update-deployment-target" class="headerlink" title="Update deployment target"></a>Update deployment target</h2><p>If you haven’t already, change the deployment target to the lowest iOS version you want to support, select the project name then select your app target, choose <strong>General</strong> and change the version in Deployment Info.</p><p><img src="/assets/images/xcode11-ios12.assets/deploymentTarget.png" alt="change deployment target"></p><h2 id="available-out-the-SceneDelegate-swift"><a href="#available-out-the-SceneDelegate-swift" class="headerlink" title="@available out the SceneDelegate.swift"></a>@available out the SceneDelegate.swift</h2><p>As the SceneDelegate class is only available on iOS 13 and above, we have to tell the compiler to only include the class for iOS 13 and above. To do this, we will add this line “<strong>@available(iOS 13.0, *)</strong>“ right above the  SceneDelegate class declaration like this :</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="meta">@available</span>(iOS <span class="number">13.0</span>, *)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SceneDelegate</span>: <span class="title">UIResponder</span>, <span class="title">UIWindowSceneDelegate</span> </span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="available-out-some-methods-in-AppDelegate-swift"><a href="#available-out-some-methods-in-AppDelegate-swift" class="headerlink" title="@available out some methods in AppDelegate.swift"></a>@available out some methods in AppDelegate.swift</h2><p>Next, there are two new methods added in AppDelegate.swift, which only supports iOS 13 and above. We will add the same @available(iOS 13.0, *) on top of them as well :</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AppDelegate.swift</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@available</span>(iOS <span class="number">13.0</span>, *)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, configurationForConnecting connectingSceneSession: UISceneSession, options: UIScene.ConnectionOptions)</span></span> -&gt; <span class="type">UISceneConfiguration</span> &#123;</span><br><span class="line">    <span class="comment">// Called when a new scene session is being created.</span></span><br><span class="line">    <span class="comment">// Use this method to select a configuration to create the new scene with.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="type">UISceneConfiguration</span>(name: <span class="string">"Default Configuration"</span>, sessionRole: connectingSceneSession.role)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@available</span>(iOS <span class="number">13.0</span>, *)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, didDiscardSceneSessions sceneSessions: Set&lt;UISceneSession&gt;)</span></span> &#123;</span><br><span class="line">    <span class="comment">// Called when the user discards a scene session.</span></span><br><span class="line">    <span class="comment">// If any sessions were discarded while the application was not running, this will be called shortly after application:didFinishLaunchingWithOptions.</span></span><br><span class="line">    <span class="comment">// Use this method to release any resources that were specific to the discarded scenes, as they will not return.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Add-back-the-window-to-AppDelegate"><a href="#Add-back-the-window-to-AppDelegate" class="headerlink" title="Add back the window to AppDelegate"></a>Add back the window to AppDelegate</h2><p>If you build and run your app now, you will get a dark black screen 😱, because there’s no UIWindow initialized.</p><p>In iOS 12 and older, there’s always a <strong>var window: UIWindow?</strong> variable located at the top of AppDelegate.swft. iOS 13 has moved this variable to SceneDelegate.swift, and now we are going to add back this variable to AppDelegate.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="meta">@UIApplicationMain</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span>: <span class="title">UIResponder</span>, <span class="title">UIApplicationDelegate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> window: <span class="type">UIWindow?</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now Build and run your app on an iOS 12 devices, and it works! 🥳</p><p>I guess Apple really wants iOS developers to adopt and focus on iOS 13, to the extent that they don’t mind breaking support for iOS 12 and older with default settings in Xcode.</p><p>If you are lazy to do these step manually every time, you can also download <a href="https://developer.apple.com/download/more/" target="_blank" rel="noopener">Xcode 10.3 in the Apple’s developer download portal</a> (require sign in with your Apple ID), create a new Xcode project using it, and then edit it using Xcode 11.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If you create a new app in Xcode 11 and try to run it on an iOS 12 device or lower, you will get a bunch of errors :&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/xcode11-ios12.assets/spookyError.png&quot; alt=&quot;errors&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>The Power of Closures in SwiftUI</title>
    <link href="https://duc.ninja/2019/11/262019/nov-26-the-power-of-closures-in-swiftui/"/>
    <id>https://duc.ninja/2019/11/262019/nov-26-the-power-of-closures-in-swiftui/</id>
    <published>2019-11-26T09:30:00.000Z</published>
    <updated>2019-11-26T14:43:06.013Z</updated>
    
    <content type="html"><![CDATA[<p>One of my favorite design patterns in <em>UIKit</em> development was a Delegate pattern. <em>Delegate pattern</em> is very straightforward, and everybody knows how to use it. In the <em>Functional Programming</em> world, we usually replace delegates with closures. This week we will learn how to use closures to make <em>SwiftUI</em> views composable and decoupled.</p><a id="more"></a><h4 id="Passing-closures-to-child-views"><a href="#Passing-closures-to-child-views" class="headerlink" title="Passing closures to child views"></a>Passing closures to child views</h4><p>I usually build my app screen by implementing one container view which handles all the data-flow related to the screen and a couple of rendering views, which simply represent passed data and propagate user actions to the container view. Let’s take a look at an example.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PostContainerView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">EnvironmentObject</span> <span class="keyword">var</span> store: <span class="type">Store</span>&lt;<span class="type">State</span>, <span class="type">Action</span>&gt;</span><br><span class="line">    @<span class="type">State</span> <span class="keyword">private</span> <span class="keyword">var</span> content: <span class="type">String</span> = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">PostContentView</span>(</span><br><span class="line">            content: $content,</span><br><span class="line">            postContent: postContent</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">postContent</span><span class="params">()</span></span> &#123;</span><br><span class="line">        store.send(.post(content))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PostContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">Binding</span> <span class="keyword">var</span> content: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> postContent: () -&gt; <span class="type">Void</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">TextField</span>(<span class="string">"type something..."</span>, text: $content)</span><br><span class="line">            <span class="type">Button</span>(<span class="string">"post"</span>, action: postContent)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here we have a container view that handles user actions by providing a closure to the child view. <em>PostContentView</em> renders the state provided by a container view and passes user action to the container view. This technique allows us to reuse <em>PostContentView</em> across the codebase. We can use it whenever we need to post a comment or some post.</p><h4 id="Extracting-navigation-into-closures"><a href="#Extracting-navigation-into-closures" class="headerlink" title="Extracting navigation into closures"></a>Extracting navigation into closures</h4><p><em>SwiftUI</em> has a pretty declarative way of building navigation between the screens. All you need to do is embedding your view into a <em>NavigationLink</em> with a provided destination view. Here is a quick example of using <em>NavigationLink</em> in <em>SwiftUI</em> apps.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ItemsView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> items: [<span class="type">Item</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationView</span> &#123;</span><br><span class="line">            <span class="type">List</span>(items) &#123; item <span class="keyword">in</span></span><br><span class="line">                <span class="type">NavigationLink</span>(destination: <span class="type">DetailsView</span>(item: item)) &#123;</span><br><span class="line">                    <span class="type">Text</span>(item.id.uuidString)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As you can see in the example above, we simply wrap our list item into a <em>NavigationLink</em>, which navigates to the <em>DetailsView</em> after a click on any list item. The logic here is very straightforward, but it has at least one downside. <em>ItemsView</em> knows about <em>DetailsView</em> and depends on it, and because of that, we can’t reuse it somewhere in our app, or we can’t use it with a different destination in other parts of the app. Let’s see how we can solve the problem by using closures.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ItemsView</span>&lt;<span class="title">Destination</span>: <span class="title">View</span>&gt;: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> items: [<span class="type">Item</span>]</span><br><span class="line">    <span class="keyword">let</span> buildDestination: (<span class="type">Item</span>) -&gt; <span class="type">Destination</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationView</span> &#123;</span><br><span class="line">            <span class="type">List</span>(items) &#123; item <span class="keyword">in</span></span><br><span class="line">                <span class="type">NavigationLink</span>(destination: <span class="keyword">self</span>.buildDestination(item)) &#123;</span><br><span class="line">                    <span class="type">Text</span>(item.id.uuidString)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I refactored our <em>ItemsView</em> to accept a closure which maps an item to a destination view. It allows us to leave the responsibility of creating a destination view to a parent view. Now we can reuse <em>ItemsView</em> with different destinations depending on our use case. Here is a code sample demonstrating the usage of the <em>ItemsView</em>.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ItemsContainerView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">State</span> <span class="keyword">private</span> <span class="keyword">var</span> items: [<span class="type">Item</span>] = [.<span class="keyword">init</span>(), .<span class="keyword">init</span>(), .<span class="keyword">init</span>()]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ItemsView</span>(items: items) &#123; item <span class="keyword">in</span></span><br><span class="line">            <span class="comment">// build your destination view here</span></span><br><span class="line">            <span class="type">Text</span>(item.id.uuidString)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here we have <em>ItemsContainerView</em>, which handles data-flow for the screen and builds the destination view. It feels very natural by using trailing closure syntax.</p><h4 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h4><p>This week we learned how to use <em>closures</em> to extract navigation and user input handling from <em>SwiftUI</em> views. <em>Closures</em> allow us to make our views decoupled and respecting the single responsibility principle. We can benefit it to build simple and composable view hierarchies in <em>SwiftUI</em>. I hope you enjoy the post. See you!</p><p>source: Majid Jabrayilov</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;One of my favorite design patterns in &lt;em&gt;UIKit&lt;/em&gt; development was a Delegate pattern. &lt;em&gt;Delegate pattern&lt;/em&gt; is very straightforward, and everybody knows how to use it. In the &lt;em&gt;Functional Programming&lt;/em&gt; world, we usually replace delegates with closures. This week we will learn how to use closures to make &lt;em&gt;SwiftUI&lt;/em&gt; views composable and decoupled.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>You Have to Change Mindset to Use SwiftUI</title>
    <link href="https://duc.ninja/2019/11/262019/nov-26-you-have-to-change-mindset-to-use-swiftui/"/>
    <id>https://duc.ninja/2019/11/262019/nov-26-you-have-to-change-mindset-to-use-swiftui/</id>
    <published>2019-11-26T09:00:00.000Z</published>
    <updated>2019-11-26T14:43:06.015Z</updated>
    
    <content type="html"><![CDATA[<p><em>UIKit</em> is an imperative event-driven framework for building User Interfaces for iOS platform. It means you have to handle all the state changes during events like view loaded, button pressed, etc. The big downside of this approach is the complexity of keeping in sync User Interface with its state. As soon as state changes, you need to manually add/remove/show/hide the views and keep it in sync with the current state.</p><a id="more"></a><p><em>SwiftUI</em> is a declarative framework for building User Interfaces on Apple platforms. The keyword here is declarative. Declarative means that you need to declare what you want to achieve, and the framework takes care of it. Framework knows the best way to render the User Interface.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UI</span> = f(state)</span><br></pre></td></tr></table></figure><p>The User Interface in <em>SwiftUI</em> is a function of its state. It means whenever the view’s state changes, it recomputes its <strong>body property</strong> and generates a new view. Let’s take a look at a quick sample.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">ObservedObject</span> <span class="keyword">var</span> store: <span class="type">Store</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Group</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> store.isLoading &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">"Loading..."</span>)</span><br><span class="line">                    .font(.subheadline)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">Image</span>(<span class="string">"photo"</span>)</span><br><span class="line">                    .font(.largeTitle)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As you can see in the example above, we have a view that shows loading text and image when the loading finishes. <em>ObserverObject</em> here is a state of this view, and as soon as it changes, <em>SwiftUI</em> recomputes the body property and assigns a new view. In typical <em>UIKit</em> development, we need manually to hide/show the elements of the view hierarchy, but in <em>SwiftUI</em>, we don’t need to add/remove the loading indicator. We have a few ways of describing a state of the view in SwiftUI.</p><p>Let’s take a more in-depth look at what happens when the view’s state changes. <em>SwiftUI</em> has a snapshot of the current view hierarchy, and as soon as state changes, it computes a new view. Finally, <em>SwiftUI</em> applies diffing algorithms to understand differences and automatically add/remove/update needed views. By default, <em>SwiftUI</em> uses standard fade in/out transition to show/hide views, but you can manually change the transition to any animation you want.</p><h4 id="View-hierarchy"><a href="#View-hierarchy" class="headerlink" title="View hierarchy"></a>View hierarchy</h4><p>Let’s talk about view hierarchy now, and how actually <em>SwiftUI</em> renders your view struct. The very first thing which I want to mention that <em>SwiftUI</em> doesn’t render your view struct by doing the one-to-one mapping. You can use as many view containers as you want, but in the end, <em>SwiftUI</em> renders only views that make sense. It means that you can extract you view logic into small views and then compose and reuse them across the app. Don’t worry, performance, in this case, won’t be affected.</p><p>The best way to understand the complex view hierarchies in <em>SwiftUI</em> is by printing its type. <em>SwiftUI</em> uses the static type system of <em>Swift</em> to make diffing so fast. First of all, it checks the type of the view, and then checks its values of the view components. I’m not a fan of using reflections in production code, but it is very helpful during the learning process.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="type">Mirror</span>(reflecting: <span class="type">ContentView</span>(store: .<span class="keyword">init</span>()).body))</span><br><span class="line"><span class="comment">// Group&lt;_ConditionalContent&lt;Text, ModifiedContent&lt;Image, _EnvironmentKeyWritingModifier&lt;Optional&lt;Font&gt;&gt;&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure><p>By using <em>Mirror</em> struct, we can print the real type of the <em>ContentView*’s body and learn how *SwiftUI</em> works under the hood.</p><h4 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h4><p>This week we learned the main difference between <em>UIKit</em> and <em>SwiftUI</em> and took an in-depth look at the diffing algorithm in <em>SwiftUI</em>. Thanks for reading, and see you next week!</p><p>source: swiftwithmajid</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;UIKit&lt;/em&gt; is an imperative event-driven framework for building User Interfaces for iOS platform. It means you have to handle all the state changes during events like view loaded, button pressed, etc. The big downside of this approach is the complexity of keeping in sync User Interface with its state. As soon as state changes, you need to manually add/remove/show/hide the views and keep it in sync with the current state.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Swift 5.1 Using Self to Refer to Enclosing Types</title>
    <link href="https://duc.ninja/2019/11/022019/nov-02-swift-5-1-using-self-to-refer-to-enclosing-types/"/>
    <id>https://duc.ninja/2019/11/022019/nov-02-swift-5-1-using-self-to-refer-to-enclosing-types/</id>
    <published>2019-11-02T06:15:00.000Z</published>
    <updated>2019-11-26T14:43:06.012Z</updated>
    
    <content type="html"><![CDATA[<p>Swift’s <code>Self</code> keyword (<em>or type, really</em>) has previously enabled us to dynamically refer to a type in contexts where the actual concrete type isn’t known — for example by referring to a protocol’s implementing type within a protocol extension:</p><a id="more"></a><p>Swift’s <code>Self</code> keyword (<em>or type, really</em>) has previously enabled us to dynamically refer to a type in contexts where the actual concrete type isn’t known — for example by referring to a protocol’s implementing type within a protocol extension:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Numeric</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">incremented</span><span class="params">(by value: <span class="keyword">Self</span> = <span class="number">1</span>)</span></span> -&gt; <span class="type">Self</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span> + value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>While that’s still possible, the scope of <code>Self</code> has now been extended to also include concrete types — like enums, structs and classes — enabling us to use <code>Self</code> as a sort of alias referring to a method or property’s <em>enclosing</em> type, like this:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">extension TextTransform &#123;</span><br><span class="line">    static <span class="selector-tag">var</span> capitalize: Self &#123;</span><br><span class="line">        return TextTransform &#123; $<span class="number">0</span><span class="selector-class">.capitalized</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static <span class="selector-tag">var</span> removeLetters: Self &#123;</span><br><span class="line">        return TextTransform &#123; $<span class="number">0</span><span class="selector-class">.filter</span> &#123; !$<span class="number">0</span><span class="selector-class">.isLetter</span> &#125; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The fact that we can now use <code>Self</code> above, rather than the full <code>TextTransform</code> type name, is of course purely <em>syntactic sugar</em> — but it can help make our code a bit more compact, especially when dealing with long type names. We can even use <code>Self</code> inline within a method or property as well, further making the above code even more compact:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">extension TextTransform &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> capitalize: <span class="keyword">Self</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">Self</span> &#123; $<span class="number">0.</span>capitalized &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> removeLetters: <span class="keyword">Self</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">Self</span> &#123; $<span class="number">0.</span>filter &#123; !$<span class="number">0.</span>isLetter &#125; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Besides referring to an enclosing type itself, we can now also use <code>Self</code> to access static members within an instance method or property — which is quite useful in situations when we want to reuse the same value across all instances of a type, such as the <code>cellReuseIdentifier</code> in this example:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListViewController</span>: <span class="title">UITableViewController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> cellReuseIdentifier = <span class="string">"list-cell"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line"></span><br><span class="line">        tableView.register(</span><br><span class="line">            <span class="type">ListTableViewCell</span>.<span class="keyword">self</span>,</span><br><span class="line">            forCellReuseIdentifier: <span class="type">Self</span>.cellReuseIdentifier</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Again, we could’ve simply typed out <code>ListViewController</code> above when accessing our static property, but using <code>Self</code> does arguably improve the readability of our code — and will also enable us to rename our view controller without having to update the way we access its static members. <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0242-default-values-memberwise.md" target="_blank" rel="noopener">https://github.com/apple/swift-evolution/blob/master/proposals/0242-default-values-memberwise.md</a>)</p><p>Happy coding!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Swift’s &lt;code&gt;Self&lt;/code&gt; keyword (&lt;em&gt;or type, really&lt;/em&gt;) has previously enabled us to dynamically refer to a type in contexts where the actual concrete type isn’t known — for example by referring to a protocol’s implementing type within a protocol extension:&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Swift 5.1 Implicit Returns and Default Values for Memberwise Initializer</title>
    <link href="https://duc.ninja/2019/10/122019/oct-12-swift-5-1-implicit-return/"/>
    <id>https://duc.ninja/2019/10/122019/oct-12-swift-5-1-implicit-return/</id>
    <published>2019-10-12T06:30:00.000Z</published>
    <updated>2019-11-26T14:43:06.015Z</updated>
    
    <content type="html"><![CDATA[<p>The release of <code>Swift 5.1</code> brought some useful polish to the language with minimal source breaking changes. Some of the bigger improvements like property wrappers and ordered collection diffing take some time to get your head around. Luckily there are also some quick hits that you can start using today.</p><a id="more"></a><p>Implicit returns<br>Many languages allow you to skip the return statement in a method. For example, a Ruby method returns the value of the last expression evaluated:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ruby</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">greeting</span></span></span><br><span class="line">    <span class="string">"Hello"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">joe = Person.new</span><br><span class="line">puts joe.greeting  /<span class="regexp">/ "Hello"</span></span><br></pre></td></tr></table></figure><p><code>Swift 5.1</code> allows you to omit the return statement for functions (or closures) which are single expressions. For example, we can rewrite the following:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">greeting</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As this with Swift 5.1:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">greeting</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="string">"Hello"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can only omit the return in Swift when the function is a single expression. So while the following is valid Ruby:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ruby</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greeting</span></span></span><br><span class="line">  <span class="keyword">if</span> is_birthday?</span><br><span class="line">    <span class="string">"Happy Birthday!"</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="string">"Hello"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>You cannot write the same in Swift. Unfortunately, in Swift the if conditional is a statement, not an expression so you need the return keywords:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> isBirthday = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">greeting</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> isBirthday &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Happy Birthday"</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Hello"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this trivial case we can rewrite this as a single expression and again omit the return:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">greeting</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">  isBirthday ? <span class="string">"Happy Birthday"</span> : <span class="string">"Hello"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This also works well when the getter of a property is a single expression:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> formattedAge: <span class="type">String</span> &#123;</span><br><span class="line">    <span class="type">NumberFormatter</span>.localizedString(from: age <span class="keyword">as</span> <span class="type">NSNumber</span>,</span><br><span class="line">                                  number: .spellOut)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Default values for memberwise initializer<br>As Swift matures a number of the rough edges of the language are getting smoothed over. This change is another example of that. You probably know that a Swift struct gets a default initializer. For example, given this structure:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Country</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">  <span class="keyword">var</span> population: <span class="type">Int</span></span><br><span class="line">  <span class="keyword">var</span> visited: <span class="type">Bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">The</span> compiler creates an initializer with parameters <span class="keyword">for</span> each member of the structure:</span><br><span class="line"></span><br><span class="line">```swift</span><br><span class="line"><span class="keyword">let</span> place = <span class="type">Country</span>(name: <span class="string">"Antarctica"</span>, population: <span class="number">0</span>,</span><br><span class="line">                    visited: <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p>But what if our structure has default values like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Country</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">  <span class="keyword">var</span> population: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> visited: <span class="type">Bool</span> = <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Unfortunately until <code>Swift 5.1</code> you couldn’t omit the default values from the initializer. You’d get a compiler error about missing arguments. It’s reasonable to want to use an initializer that assumes the default values like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> place = <span class="type">Country</span>(name: <span class="string">"Antarctica"</span>)</span><br></pre></td></tr></table></figure><p>That now works with Swift 5.1.</p><ul><li>Further Details<br>See the following Swift evolution proposal documentation for more details:</li></ul><p><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0255-omit-return.md" target="_blank" rel="noopener">SE-0255 Implicit returns from single-expression functions</a><br><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0242-default-values-memberwise.md" target="_blank" rel="noopener">SE-0242 Synthesize default values for the memberwise initializer</a></p><p>Happy coding!<br>[Source: useyourloaf]</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The release of &lt;code&gt;Swift 5.1&lt;/code&gt; brought some useful polish to the language with minimal source breaking changes. Some of the bigger improvements like property wrappers and ordered collection diffing take some time to get your head around. Luckily there are also some quick hits that you can start using today.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Using Codable to Make Enums With Associated Values Even More Powerful</title>
    <link href="https://duc.ninja/2019/05/262019/may-26-codable-enums-with-associated/"/>
    <id>https://duc.ninja/2019/05/262019/may-26-codable-enums-with-associated/</id>
    <published>2019-05-26T01:30:00.000Z</published>
    <updated>2019-11-02T05:56:37.694Z</updated>
    
    <content type="html"><![CDATA[<p>One of Swift’s greatest features, and one of my favorites, are enums with associated values. The language itself uses them for its fundamentals, like <code>Optional&lt;T&gt;</code>, which either has a <code>.some(T)</code> or is <code>.none</code>. Another example is the new since Swift 5 <code>Result&lt;T, E&gt;</code>, which either contains a <code>.success(T)</code> or a <code>.failure(E)</code> case. In this post, we will go over cases (no pun intended) where an enum is more suitable than a struct or class, and also learn how one can make enums with associated values conform to Codable, achieving a better and safer usage of these data representations when they need to be encoded and decoded. You can scroll to the end of the post to get the final playground.</p><p>Enums with associated values make sense when a type may hold only one value, instead of two or more optional values. A classic example for Result is a network operation, which might return either an error or an object. They never should be nil or not be nil simultaneously: when one is nil, the other should exist.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//in this case, the caller must check for nil for both values</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">issueRequest</span>&lt;T&gt;<span class="params">(<span class="number">_</span> request: URLRequest, completion: @escaping <span class="params">(T?, Error?)</span></span></span> -&gt; <span class="type">Void</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//here, however, it will be either .success or .failure</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">issueRequest</span>&lt;T&gt;<span class="params">(<span class="number">_</span> request: URLRequest, completion: @escaping <span class="params">(Result&lt;T, Error&gt;)</span></span></span> -&gt; <span class="type">Void</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><p>Now, let’s think of a more concrete example. Let’s imagine we have an app which allows users to confirm presence in some event, and the response from the server might have one out of three possibilites:</p><ul><li>The user is confirmed in the event, and a list of users going is also returned</li><li>The event is full and the user is at a specific position in the waitlist, and a list of users going is also returned</li><li>The user cannot go to the event for some reason (it is too late or there is no waitlist, for example)<br>The server returns a JSON encoded response, so these are the possibilities:<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//1 - user is confirmed:</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"status"</span>: <span class="string">"confirmed"</span>,</span><br><span class="line">  <span class="attr">"confirmedUsers"</span>: [</span><br><span class="line">    &#123;<span class="attr">"id"</span>: <span class="string">"abc"</span>, <span class="attr">"name"</span>: <span class="string">"Rachel"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">"id"</span>: <span class="string">"def"</span>, <span class="attr">"name"</span>: <span class="string">"John"</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//2 - user is in waitlist:</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"status"</span>: <span class="string">"waitlist"</span>,</span><br><span class="line">  <span class="attr">"position"</span>: <span class="number">12</span>,</span><br><span class="line">  <span class="attr">"confirmedUsers"</span>: [</span><br><span class="line">    &#123;<span class="attr">"id"</span>: <span class="string">"abc"</span>, <span class="attr">"name"</span>: <span class="string">"Rachel"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">"id"</span>: <span class="string">"def"</span>, <span class="attr">"name"</span>: <span class="string">"John"</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//3 - user cannot go for a different reason</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"status"</span>: <span class="string">"not allowed"</span>,</span><br><span class="line">  <span class="attr">"reason"</span>: <span class="string">"It is too late to confirm to this event."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>Now, in our client, we need to be able to represent this data and its possible values. If we would use a struct, it would probably look to something like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EventConfirmationResponse</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> status: <span class="type">String</span></span><br><span class="line">  <span class="keyword">let</span> confirmedUsers: [<span class="type">User</span>]?</span><br><span class="line">  <span class="keyword">let</span> position: <span class="type">Int?</span></span><br><span class="line">  <span class="keyword">let</span> reason: <span class="type">String?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Can you imagine yourself checking for all the the possible states this struct might have?</p><p>In addition to that, in this case a property being present is not enough to determine what is the status: confirmed is returned in both confirmed and waitlist states. Therefore, the status property must be checked in association with the optional values. And if the API get more possibilities, it gets even worse.</p><h3 id="Enums-with-associated-values-❤️"><a href="#Enums-with-associated-values-❤️" class="headerlink" title="Enums with associated values ❤️"></a>Enums with associated values ❤️</h3><p>We can do better. It would be much safer and predictable to use the following enum:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">EventConfirmationResponse</span> </span>&#123;</span><br><span class="line">  <span class="keyword">case</span> confirmed([<span class="type">User</span>]) <span class="comment">//Contains an array of users going to the event</span></span><br><span class="line">  <span class="keyword">case</span> waitlist(<span class="type">Int</span>, [<span class="type">User</span>]) <span class="comment">//Contains the position in the waitlist and</span></span><br><span class="line">  <span class="keyword">case</span> notAllowed(<span class="type">String</span>) <span class="comment">//Contains the reason why the user is not allowed</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Great! Now, whenever this response needs to be used for being displayed to the user, one can use a switch statement to check each case and extract the associated values:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> confirmationResponse &#123;</span><br><span class="line">  <span class="keyword">case</span> .confirmed(<span class="keyword">let</span> users):</span><br><span class="line">    <span class="keyword">let</span> confirmedEventVC = <span class="type">ConfirmedEventViewController</span>(event: event, confirmed: users)</span><br><span class="line">    present(confirmedEventVC, animated: <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">case</span> .waitlist(<span class="keyword">let</span> position, <span class="keyword">let</span> users):</span><br><span class="line">    <span class="keyword">let</span> eventWaitlistVC = <span class="type">EventWaitlistViewController</span>(event: event, position: position, confirmed: users)</span><br><span class="line">    present(eventWaitlistVC, animated: <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">case</span> .notAllowed(<span class="keyword">let</span> reason):</span><br><span class="line">    presentNotAllowedAlert(with: reason)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This looks much better. Now, we want to provide the EventConfirmationResponse enum to our HTTP client, so it can convert the JSON response directly into the enum: we want it to be Decodable, which has a great advantage: we hand over the different possibilites to the JSONDecoder, and if there is any field missing or incompatible with what we described above, the decoding fails. Failing early, in the decoding stage, is better than failing at a UI display stage. Also, it’s worth noting, if the server is also being written in Swift (e.g., with Vapor), we can make it conform to Encodable, and JSONEncoder will take care of converting it exactly into the expected response.</p><p>Encodable &amp; Decodable is the exact definition of Codable. If we add it to our enum and try to compile, we will get the following error:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">EventConfirmationResponse</span>: <span class="title">Codable</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//type 'EventConfirmationResponse' does not conform to protocol 'Decodable'</span></span><br><span class="line"><span class="comment">//protocol requires initializer 'init(from:)' with type '(from: Decoder)'</span></span><br><span class="line"><span class="comment">//type 'EventConfirmationResponse' does not conform to protocol 'Codable'</span></span><br><span class="line"><span class="comment">//protocol requires function 'encode(to:)' with type '(Encoder) throws -&gt; ()'</span></span><br></pre></td></tr></table></figure><p>The message is pretty clear. Because Swift doesn’t know how one wants the associated values to be encoded, and there is no defined standard, it doesn’t know what to do, and, consequently, asks the developer to implement them.</p><h3 id="Implementing-the-Encodable-amp-Decodable-protocols"><a href="#Implementing-the-Encodable-amp-Decodable-protocols" class="headerlink" title="Implementing the Encodable &amp; Decodable protocols"></a>Implementing the Encodable &amp; Decodable protocols</h3><h4 id="Encodable"><a href="#Encodable" class="headerlink" title="Encodable"></a>Encodable</h4><p>As the errors stated, there are two methods that need to be implemented. Let’s first do the encoding part, thinking about the JSON declared above, and move to the decoding later on.</p><p>The required method by <code>Encodabl</code>e is <code>encode(to encoder: Encoder)</code>. The parameter is a Encoder, which might be Foundation’s JSONEncoder, or a custom XMLEncoder, for example. In order to encode the data, the Encoder provides three types of encoding containers:</p><ul><li><code>KeyedEncodingContainer&lt;Key&gt;</code>: to be used when the encoding will have a key-value format, using a <code>CodingKey</code> enum to access the possible keys, as used when encoding a dictionary. Types that automatically conform to <code>Encodable</code> will have the <code>CodingKey</code> generated automatically as well.</li><li><code>UnkeyedEncodingContainer</code>: to be used when encoding multiple, unkeyed values, as used when encoding an array, for example.</li><li><code>SingleValueEncodingContainer</code>: to be used when a single primitive value, like a string.</li></ul><p>The documentation says: You must use only one kind of top-level encoding container. This means that when encoding a value, only one container must be used, and not more than one simultaneously. In our case, we will choose the keyed container, because we will encode our enum into a key-value JSON object.</p><p>As mentioned in the explanation of the keyed container, we need to create a CodingKey-conforming type. We will create a case for each possible key in the JSON. Also, because there are only three acceptable statuses (confirmed, waitlist, and not allowed), we can use a simple enum to ensure the status value is one of them.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//<span class="keyword">declare</span> which <span class="keyword">keys</span> <span class="keyword">in</span> the <span class="keyword">JSON</span> we <span class="keyword">are</span> interested <span class="keyword">in</span></span><br><span class="line">enum CodingKeys: <span class="keyword">String</span>, CodingKey &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">status</span></span><br><span class="line">    <span class="keyword">case</span> confirmedUsers</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">position</span></span><br><span class="line">    <span class="keyword">case</span> reason</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//<span class="keyword">declare</span> the possible <span class="keyword">values</span> os the <span class="keyword">status</span> <span class="keyword">key</span></span><br><span class="line"><span class="keyword">private</span> enum EventConfirmationStatus: <span class="keyword">String</span>, Codable &#123;</span><br><span class="line">    <span class="keyword">case</span> confirmed</span><br><span class="line">    <span class="keyword">case</span> waitlist</span><br><span class="line">    <span class="keyword">case</span> notAllowed = <span class="string">"not allowed"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Notice that in both enums, where the raw value is a string, there is no need to actually declare it - the cases are compiled into the raw values (except the notAllowed case). Now it’s left to implement the encoding itself. We will need to do two things: (1) get the keyed container from the encoder, and (2) iterate over the event confirmation enum in order to encode each case, separately:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">EventConfirmationResponse</span>: <span class="title">Encodable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">encode</span><span class="params">(to encoder: Encoder)</span></span> <span class="keyword">throws</span> &#123;</span><br><span class="line">      <span class="comment">//access the keyed container</span></span><br><span class="line">      <span class="keyword">var</span> container = encoder.container(keyedBy: <span class="type">CodingKeys</span>.<span class="keyword">self</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment">//iterate over self and encode (1) the status and (2) the associated value(s)</span></span><br><span class="line">      <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> .confirmed(<span class="keyword">let</span> users):</span><br><span class="line">          <span class="keyword">try</span> container.encode(<span class="type">EventConfirmationStatus</span>.confirmed, forKey: .status)</span><br><span class="line">          <span class="keyword">try</span> container.encode(users, forKey: .confirmedUsers)</span><br><span class="line">      <span class="keyword">case</span> .waitlist(<span class="keyword">let</span> position, <span class="keyword">let</span> users):</span><br><span class="line">          <span class="keyword">try</span> container.encode(<span class="type">EventConfirmationStatus</span>.waitlist, forKey: .status)</span><br><span class="line">          <span class="keyword">try</span> container.encode(users, forKey: .confirmedUsers)</span><br><span class="line">          <span class="keyword">try</span> container.encode(position, forKey: .position)</span><br><span class="line">      <span class="keyword">case</span> .notAllowed(<span class="keyword">let</span> reason):</span><br><span class="line">          <span class="keyword">try</span> container.encode(<span class="type">EventConfirmationStatus</span>.notAllowed, forKey: .status)</span><br><span class="line">          <span class="keyword">try</span> container.encode(reason, forKey: .reason)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can now use JSONEncoder().encode(confirmation) and get a JSON representation of our enum.</p><h4 id="Decodable"><a href="#Decodable" class="headerlink" title="Decodable"></a>Decodable</h4><p>To finally conform do Codable, there’s left the Decodable protocol. To achieve it, we need to initialize our enum given a Decoder with init(from decoder: Decoder).</p><p>Similar Encoder, Decoder also has the three analogue containers. As all 3 states have a status key and we need it to define which state will be initialized, we will look for it first by trying to decode a String for the .status coding key. Then, we iterate on the status value, and look for the other values for the relevant keys:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">EventConfirmationResponse</span>: <span class="title">Decodable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">init</span>(from decoder: <span class="type">Decoder</span>) <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="comment">//access the keyed container</span></span><br><span class="line">        <span class="keyword">let</span> container = <span class="keyword">try</span> decoder.container(keyedBy: <span class="type">CodingKeys</span>.<span class="keyword">self</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//decode the value for the status key into the EventConfirmationStatus enum</span></span><br><span class="line">        <span class="keyword">let</span> status = <span class="keyword">try</span> container.decode(<span class="type">EventConfirmationStatus</span>.<span class="keyword">self</span>, forKey: .status)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//iterate over the received status, and try to decode the other relevant values</span></span><br><span class="line">        <span class="keyword">switch</span> status &#123;</span><br><span class="line">        <span class="keyword">case</span> .confirmed:</span><br><span class="line">            <span class="keyword">let</span> users = <span class="keyword">try</span> container.decode([<span class="type">User</span>].<span class="keyword">self</span>, forKey: .confirmedUsers)</span><br><span class="line">            <span class="keyword">self</span> = .confirmed(users)</span><br><span class="line">        <span class="keyword">case</span> .waitlist:</span><br><span class="line">            <span class="keyword">let</span> users = <span class="keyword">try</span> container.decode([<span class="type">User</span>].<span class="keyword">self</span>, forKey: .confirmedUsers)</span><br><span class="line">            <span class="keyword">let</span> position = <span class="keyword">try</span> container.decode(<span class="type">Int</span>.<span class="keyword">self</span>, forKey: .position)</span><br><span class="line">            <span class="keyword">self</span> = .waitlist(position, users)</span><br><span class="line">        <span class="keyword">case</span> .notAllowed:</span><br><span class="line">            <span class="keyword">let</span> reason = <span class="keyword">try</span> container.decode(<span class="type">String</span>.<span class="keyword">self</span>, forKey: .reason)</span><br><span class="line">            <span class="keyword">self</span> = .notAllowed(reason)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Done! Our enum is now ready to be encoded and decoded. If you want to test and see all the code in a single place, I’ve prepared a playground which you can <a href="https://files.natanrolnik.me/blog-downloads/CodableEnumsWithAssociatedValues.playground.zip" target="_blank" rel="noopener">download here</a>.</p><p>Happy coding!<br>[Source: Natan Rolnik]</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;One of Swift’s greatest features, and one of my favorites, are enums with associated values. The language itself uses them for its fundamentals, like &lt;code&gt;Optional&amp;lt;T&amp;gt;&lt;/code&gt;, which either has a &lt;code&gt;.some(T)&lt;/code&gt; or is &lt;code&gt;.none&lt;/code&gt;. Another example is the new since Swift 5 &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt;, which either contains a &lt;code&gt;.success(T)&lt;/code&gt; or a &lt;code&gt;.failure(E)&lt;/code&gt; case. In this post, we will go over cases (no pun intended) where an enum is more suitable than a struct or class, and also learn how one can make enums with associated values conform to Codable, achieving a better and safer usage of these data representations when they need to be encoded and decoded. You can scroll to the end of the post to get the final playground.&lt;/p&gt;
&lt;p&gt;Enums with associated values make sense when a type may hold only one value, instead of two or more optional values. A classic example for Result is a network operation, which might return either an error or an object. They never should be nil or not be nil simultaneously: when one is nil, the other should exist.&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//in this case, the caller must check for nil for both values&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;issueRequest&lt;/span&gt;&amp;lt;T&amp;gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; request: URLRequest, completion: @escaping &lt;span class=&quot;params&quot;&gt;(T?, Error?)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//here, however, it will be either .success or .failure&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;issueRequest&lt;/span&gt;&amp;lt;T&amp;gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; request: URLRequest, completion: @escaping &lt;span class=&quot;params&quot;&gt;(Result&amp;lt;T, Error&amp;gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Inclusive Enums With OptionSet</title>
    <link href="https://duc.ninja/2019/05/252019/may-25-optionset/"/>
    <id>https://duc.ninja/2019/05/252019/may-25-optionset/</id>
    <published>2019-05-25T01:30:00.000Z</published>
    <updated>2019-11-02T05:56:37.694Z</updated>
    
    <content type="html"><![CDATA[<p>Enums are one of the most powerful features of Swift language. It forms Value-Oriented Programming in conjunction with Structs. Enum is the best way to describe the exclusive state in Swift, but what about the case when you need an inclusive state. Today we will talk about OptionSet protocol and how we can achieve inclusive states with it.</p><h3 id="Exclusive-Enums"><a href="#Exclusive-Enums" class="headerlink" title="Exclusive Enums"></a>Exclusive Enums</h3><p>Assume that we have some HistoryFetcher class, which can fetch data from a cache or make a network request or both of them. Let’s start with describing very simple source enum.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">FetchSource</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> memory</span><br><span class="line">    <span class="keyword">case</span> disk</span><br><span class="line">    <span class="keyword">case</span> remote</span><br><span class="line">    <span class="keyword">case</span> cache</span><br><span class="line">    <span class="keyword">case</span> all</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>Now we can work on our history fetch method which will take a source as a parameter and make request accordingly to the source.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HistoryFetcher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fetch</span><span class="params">(from source: FetchSource = .all, handler: @escaping Handler&lt;History&gt;)</span></span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> source &#123;</span><br><span class="line">        <span class="keyword">case</span> .memory:</span><br><span class="line">            fetchMemory(handler: handler)</span><br><span class="line">        <span class="keyword">case</span> .disk:</span><br><span class="line">            fetchDisk(handler: handler)</span><br><span class="line">        <span class="keyword">case</span> .remote:</span><br><span class="line">            fetchRemote(handler: handler)</span><br><span class="line">        <span class="keyword">case</span> .cache:</span><br><span class="line">            fetchMemory(handler: handler)</span><br><span class="line">            fetchDisk(handler: handler)</span><br><span class="line">        <span class="keyword">case</span> .all:</span><br><span class="line">            fetchMemory(handler: handler)</span><br><span class="line">            fetchDisk(handler: handler)</span><br><span class="line">            fetchRemote(handler: handler)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There are possible downsides of this approach.</p><p>As soon as we increase the count of the sources, we have to add a separated case for that and add it to “all” case handling.<br>We can’t easily create some unions of sources, like memory and remote, or disk and remote, etc. We need a lot of additional logic here to make it possible.</p><h4 id="OptionSet-for-the-rescue"><a href="#OptionSet-for-the-rescue" class="headerlink" title="OptionSet for the rescue"></a>OptionSet for the rescue</h4><p>OptionSet is a protocol which represents bitset types, where individual bits represent members of a set. Adopting this protocol in your custom types lets you perform set-related operations such as membership tests, unions, and intersections on those types.</p><p>OptionSet protocol is very straightforward. All we need is rawValue property which should be a type conforming FixedWidthInteger. So basically in most cases, we can use Int type. Next, we have to create unique options using the unique power of two for every case. Here we can use bit shifting operators. Let’s refactor our FetchSource enum to use OptionSet.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FetchSource</span>: <span class="title">OptionSet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> rawValue: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> memory = <span class="type">FetchSource</span>(rawValue: <span class="number">1</span> &lt;&lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> disk = <span class="type">FetchSource</span>(rawValue: <span class="number">1</span> &lt;&lt; <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> remote = <span class="type">FetchSource</span>(rawValue: <span class="number">1</span> &lt;&lt; <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> cache: <span class="type">FetchSource</span> = [.memory, .disk]</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> all: <span class="type">FetchSource</span> = [.cache, .remote]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As you see above, we can create multiple union members, which contains other members. It brings real power while handling this OptionSets. Here is the refactored version of our HistoryFetcher class.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HistoryFetcher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fetch</span><span class="params">(from source: FetchSource = .all, handler: @escaping Handler&lt;History&gt;)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> source.<span class="built_in">contains</span>(.memory) &#123;</span><br><span class="line">            fetchMemory(handler: handler)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> source.<span class="built_in">contains</span>(.disk) &#123;</span><br><span class="line">            fetchDisk(handler: handler)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> source.<span class="built_in">contains</span>(.remote) &#123;</span><br><span class="line">            fetchRemote(handler: handler)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>New implementation of HistoryFetcher class is pretty simple. We handle every unique case of FetchSource which is also covering all possible unions of our OptionSet.</p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>Today we learn how to use OptionSet protocol and how it can be useful as Enum replacement with some extra features. We will continue to cover small and powerful types from the Swift Foundation in future posts.</p><p>Happy coding!<br>[Source: mecid]</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Enums are one of the most powerful features of Swift language. It forms Value-Oriented Programming in conjunction with Structs. Enum is the best way to describe the exclusive state in Swift, but what about the case when you need an inclusive state. Today we will talk about OptionSet protocol and how we can achieve inclusive states with it.&lt;/p&gt;
&lt;h3 id=&quot;Exclusive-Enums&quot;&gt;&lt;a href=&quot;#Exclusive-Enums&quot; class=&quot;headerlink&quot; title=&quot;Exclusive Enums&quot;&gt;&lt;/a&gt;Exclusive Enums&lt;/h3&gt;&lt;p&gt;Assume that we have some HistoryFetcher class, which can fetch data from a cache or make a network request or both of them. Let’s start with describing very simple source enum.&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FetchSource&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; memory&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; disk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; remote&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; cache&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; all&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Empty Strings in Swift 5</title>
    <link href="https://duc.ninja/2019/05/242019/may-24-swift-5-empty-string/"/>
    <id>https://duc.ninja/2019/05/242019/may-24-swift-5-empty-string/</id>
    <published>2019-05-24T01:13:00.000Z</published>
    <updated>2019-11-26T14:43:06.010Z</updated>
    
    <content type="html"><![CDATA[<p>How do you tell if a string is empty in Swift? That depends on what you mean by “empty”. You might mean a string with zero length, or maybe also an optional string that is nil. What about a “blank” string that only contains whitespace. Let’s see how to test for each of those conditions with Swift.</p><a id="more"></a><h3 id="Using-isEmpty"><a href="#Using-isEmpty" class="headerlink" title="Using isEmpty"></a>Using isEmpty</h3><p>A Swift <code>String</code> is a collection of characters and the <code>Collection</code> protocol already has a test for an empty collection:</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isEmpty: Bool &#123; <span class="keyword">get</span> &#125;</span><br></pre></td></tr></table></figure><p>We have access to the source code for <code>Collection.swift</code> in the standard library so we can see what this does:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> isEmpty: Bool &#123;</span><br><span class="line">  <span class="keyword">return</span> startIndex == endIndex</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If the <code>startIndex</code> and <code>endIndex</code> of the collection are the same the collection is empty. Using this for a <code>String</code>:</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Hello"</span><span class="string">.isEmpty</span>  <span class="string">//</span> <span class="literal">false</span></span><br><span class="line"><span class="string">""</span><span class="string">.isEmpty</span>       <span class="string">//</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote><p>Note: Use isEmpty rather than comparing count to zero which requires iterating over the entire string:</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// Don't <span class="keyword">do</span> this <span class="keyword">to</span> <span class="keyword">test</span> <span class="keyword">for</span> <span class="keyword">empty</span></span><br><span class="line">myString.count == <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="What-about-whitespace"><a href="#What-about-whitespace" class="headerlink" title="What about whitespace?"></a>What about whitespace?</h3><p>Sometimes I want to test not only for an empty string but for a blank string. For example, I want a test that also returns true for each of these strings:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">" "</span>        <span class="comment">// space</span></span><br><span class="line"><span class="string">"<span class="subst">\t</span>\r<span class="subst">\n</span>"</span>   <span class="comment">// tab, return, newline</span></span><br><span class="line"><span class="string">"\u&#123;00a0&#125;"</span> <span class="comment">// Unicode non-breaking space</span></span><br><span class="line"><span class="string">"\u&#123;2002&#125;"</span> <span class="comment">// Unicode en space</span></span><br><span class="line"><span class="string">"\u&#123;2003&#125;"</span> <span class="comment">// Unicode em space</span></span><br></pre></td></tr></table></figure><p>I’ve seen people do this by first trimming whitespace from the string and then testing for empty. With Swift 5, we can make use of [0221-character-properties][0221-character-properties] to directly test for whitespace. We could write the test like this:</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isBlank</span><span class="params">(_ string: String)</span> -&gt; <span class="title">Bool</span> &#123;</span></span><br><span class="line">  <span class="keyword">for</span> character <span class="keyword">in</span> <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> !character.isWhitespace &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>That works but a simpler way to test all elements in a sequence is to use allSatisfy. Rewriting as an extension of String:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">extension String &#123;</span><br><span class="line">  <span class="selector-tag">var</span> isBlank: Bool &#123;</span><br><span class="line">    return allSatisfy(&#123; $<span class="number">0</span><span class="selector-class">.isWhitespace</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This is looking promising:</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Hello"</span><span class="string">.isBlank</span>        <span class="string">//</span> <span class="literal">false</span></span><br><span class="line"><span class="string">"   Hello   "</span><span class="string">.isBlank</span>  <span class="string">//</span> <span class="literal">false</span></span><br><span class="line"><span class="string">""</span><span class="string">.isBlank</span>             <span class="string">//</span> <span class="literal">true</span></span><br><span class="line"><span class="string">" "</span><span class="string">.isBlank</span>            <span class="string">//</span> <span class="literal">true</span></span><br><span class="line"><span class="string">"\t\r\n"</span><span class="string">.isBlank</span>       <span class="string">//</span> <span class="literal">true</span></span><br><span class="line"><span class="string">"\u&#123;00a0&#125;"</span><span class="string">.isBlank</span>     <span class="string">//</span> <span class="literal">true</span></span><br><span class="line"><span class="string">"\u&#123;2002&#125;"</span><span class="string">.isBlank</span>     <span class="string">//</span> <span class="literal">true</span></span><br><span class="line"><span class="string">"\u&#123;2003&#125;"</span><span class="string">.isBlank</span>     <span class="string">//</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="What-about-optional-strings"><a href="#What-about-optional-strings" class="headerlink" title="What about optional strings?"></a>What about optional strings?</h3><p>We can extend the solution to allow for optional strings. Here’s an extension to Optional where the wrapped element is a String:</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">extension Optional <span class="keyword">where</span> Wrapped == <span class="built_in">String</span> &#123;</span><br><span class="line">  <span class="built_in">var</span> isBlank: Bool &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">self</span>?.isBlank ?? <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using optional chaining with a default value we return true if the optional string is nil else we test the String as before. We can now also write:</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> <span class="built_in">title</span>: String? = nil</span><br><span class="line"><span class="built_in">title</span>.isBlank            // <span class="literal">true</span></span><br><span class="line"><span class="built_in">title</span> = <span class="string">""</span></span><br><span class="line"><span class="built_in">title</span>.isBlank            // <span class="literal">true</span></span><br><span class="line"><span class="built_in">title</span> = <span class="string">"  \t  "</span></span><br><span class="line"><span class="built_in">title</span>.isBlank            // <span class="literal">true</span></span><br><span class="line"><span class="built_in">title</span> = <span class="string">"Hello"</span></span><br><span class="line"><span class="built_in">title</span>.isBlank            // <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>Testing for a “blank” string iterates over the string so don’t use it when isEmpty is all you need.</p><p>Happy coding!<br>[Source: useyourloaf]</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;How do you tell if a string is empty in Swift? That depends on what you mean by “empty”. You might mean a string with zero length, or maybe also an optional string that is nil. What about a “blank” string that only contains whitespace. Let’s see how to test for each of those conditions with Swift.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Swift 4 - Class Only Protocol</title>
    <link href="https://duc.ninja/2018/08/172018/class-only-protocol/"/>
    <id>https://duc.ninja/2018/08/172018/class-only-protocol/</id>
    <published>2018-08-17T01:13:00.000Z</published>
    <updated>2019-11-02T05:56:37.692Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/images/swift4.png" alt></p><p>We usually use the <code>class</code> keyword to define a <code>class only protocol</code> in the normal way.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">DetailViewControllerDelegate</span>: <span class="title">class</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">didFinishTask</span><span class="params">(sender: DetailViewController)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>Since Swift 4, we have an other way to define it. Introduced in <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0156-subclass-existentials.md" target="_blank" rel="noopener">0156-subclass-existentials</a></p><blockquote><p>This proposal merges the concepts of class and AnyObject, which now have the same meaning: they represent an existential for classes.</p></blockquote><p>So, it much clearer with the new way:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">DetailViewControllerDelegate</span>: <span class="title">AnyObject</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">didFinishTask</span><span class="params">(sender: DetailViewController)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Happy coding!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/images/swift4.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;We usually use the &lt;code&gt;class&lt;/code&gt; keyword to define a &lt;code&gt;class only protocol&lt;/code&gt; in the normal way.&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DetailViewControllerDelegate&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;class&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;didFinishTask&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(sender: DetailViewController)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>More Interface Builder Tips and Tricks</title>
    <link href="https://duc.ninja/2018/03/042018/interface-builder-tips-and-tricks/"/>
    <id>https://duc.ninja/2018/03/042018/interface-builder-tips-and-tricks/</id>
    <published>2018-03-04T15:56:00.000Z</published>
    <updated>2019-11-02T05:56:37.692Z</updated>
    
    <content type="html"><![CDATA[<p>My top ten tips, tricks, dos and don’ts to make you feel like an Interface Builder expert.</p><a id="more"></a><ul><li>To easily select an object when it is behind a stack of other items hold down the Ctrl (⌃) + Shift (⇧) keys and then click over the object. Select the item you want from the popup menu showing the full view hierarchy at the point where you clicked.</li></ul><p><img src="/assets/images/ib-tips/ib-tips001.png" alt></p><ul><li>Click on a view in the canvas to select it and then hold down the Option (⌥) key. Move the mouse pointer over other views in the scene to see the distances between the views:</li></ul><p><img src="/assets/images/ib-tips/ib-tips002.png" alt></p><ul><li><p>To quickly copy an object in the canvas, hold down the Option (⌥) key and then click on and drag the object.</p></li><li><p>When adjusting the position of a view in the canvas the arrow keys move the view by one point at a time. Hold down the Shift (⇧) key to jump by 5 points at a time.</p></li><li><p>When creating constraints in the canvas or document outline use the Shift (⇧) key to select multiple constraints:</p></li></ul><p><img src="/assets/images/ib-tips/ib-tips003.png" alt></p><p>Use the Option (⌥) key for alternate constraints. Useful when you want the margins instead of the safe area or a 1:1 aspect ratio:</p><p><img src="/assets/images/ib-tips/ib-tips004.png" alt></p><ul><li>There are some useful options for the canvas in the Xcode Editor menu.</li></ul><p><img src="/assets/images/ib-tips/ib-tips005.png" alt></p><p>I like to turn on either Show Layout Rectangles or Show Bounds Rectangles to see the layout guides or bounds of views.</p><p>If you are fighting with constraint priorities try turning on Show Intrinsic Size Constraints Contributing To Ambiguity. It makes it easier to see which priorities you need to change to fix the problem:</p><p><img src="/assets/images/ib-tips/ib-tips006.png" alt></p><ul><li>Don’t let your Storyboards get too large. Interface Builder slows down and if you are collaborating with other developers it gets harder to avoid conflicts. Use Editor &gt; Refactor To Storyboard to break it into smaller scenes with storyboard references. See Refactoring with Storyboard References.</li></ul><p><img src="/assets/images/ib-tips/ib-tips007.png" alt></p><ul><li><p>Don’t trust Interface Builder to Reset to Suggested Constraints. It will rarely do what you want.</p></li><li><p>Use command-equal (⌘=) to quickly resize a label, button, image, etc. to fit the content size. For example, this label is too small and high for the text:</p></li></ul><p><img src="/assets/images/ib-tips/ib-tips008.png" alt></p><p>After using ⌘= to size to fit contents:</p><p><img src="/assets/images/ib-tips/ib-tips009.png" alt></p><ul><li>Don’t forget you can preview your layout on different devices and orientations in Interface Builder with the assistant editor. This is much faster than launching the simulator or running on a device. Use the + in the bottom left corner of the assistant editor to add devices.</li></ul><p><img src="/assets/images/ib-tips/ib-tips010.png" alt></p><p>You can add multiple assistant editors with the + in the top right corner of the assistant editor. I like to use this to preview layouts with different localizations. Change the localization with the menu in the bottom right corner.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;My top ten tips, tricks, dos and don’ts to make you feel like an Interface Builder expert.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Open Terminal From Xcode</title>
    <link href="https://duc.ninja/2018/02/042018/open-terminal-from-xcode/"/>
    <id>https://duc.ninja/2018/02/042018/open-terminal-from-xcode/</id>
    <published>2018-02-04T06:20:00.000Z</published>
    <updated>2019-11-02T05:56:37.693Z</updated>
    
    <content type="html"><![CDATA[<p>You are using third-party tools like CocoaPods, Cathage, SPM or just having some useful script files for your project. It’s fine!</p><a id="more"></a><p>But you often found yourself in need of opening a Terminal window at the project location. It hard to tell that feeling. 🤔 Don’t worry, here is what you need to do:</p><h3 id="1-Create-a-sh-file"><a href="#1-Create-a-sh-file" class="headerlink" title="1.  Create a sh file"></a>1.  Create a sh file</h3><p>Create a new text file with your favourite text editor and put this inside:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">! /bin/bash</span></span><br><span class="line">open -a Terminal "$SRCROOT"</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">if [ -n "$XcodeProjectPath" ]; then</span><br><span class="line">  open -a Terminal "$XcodeProjectPath"/..</span><br><span class="line">else</span><br><span class="line">  open -a Terminal "$XcodeWorkspacePath"/..</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>It opens either <code>.xcodeproj</code> or <code>.xcworkspace</code>.</p><blockquote><p>If you prefer iTerm, just change the Terminal keyword to iTerm in this script. I’m using <strong>iTerm</strong> too, so I created a bash file like this:</p></blockquote><p><img src="/assets/images/open-terminal-from-xcode/create-script.png" alt="Create script file"></p><h3 id="2-Store-the-file"><a href="#2-Store-the-file" class="headerlink" title="2. Store the file"></a>2. Store the file</h3><p>Save it with a .sh extension in some permanent location where your wife or your girlfriend wouldn’t see it everyday so it annoys them, and they won’t delete it by mistake.</p><h3 id="3-Grant-execute-permission"><a href="#3-Grant-execute-permission" class="headerlink" title="3. Grant execute permission"></a>3. Grant execute permission</h3><p>Navigate to the location of the script file you just created using Terminal and change its permissions using:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x &lt;fileName&gt;</span><br></pre></td></tr></table></figure><p>where <strong>fileName</strong> should be replaced with the name of the .sh file you just created.</p><h3 id="4-Add-a-custom-behavior"><a href="#4-Add-a-custom-behavior" class="headerlink" title="4. Add a custom behavior"></a>4. Add a custom behavior</h3><p>In Xcode, go to <strong>Preferences -&gt; Behaviors</strong> and click the plus sign in the bottom to add a new behavior and name it something like <strong>“Open Terminal”</strong></p><p><img src="/assets/images/open-terminal-from-xcode/create-a-custom-behavior.png" alt></p><p>Tick only the last checkbox, where it says “Run”, and select the location of your .sh file.</p><h3 id="5-Assign-a-key"><a href="#5-Assign-a-key" class="headerlink" title="5. Assign a key"></a>5. Assign a key</h3><p>Click the little ⌘ symbol to the right of your behavior name and select a new keyboard shortcut for your behavior. I recommend: ctrl+command+t.</p><p><img src="/assets/images/open-terminal-from-xcode/assign-key.png" alt></p><p>That’s it, you’re done!  🎉  🎉  🎉</p><p>You can get my sh file here: <a href="https://gitlab.com/snippets/1697089" target="_blank" rel="noopener">xcode-terminal.sh</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;You are using third-party tools like CocoaPods, Cathage, SPM or just having some useful script files for your project. It’s fine!&lt;/p&gt;
    
    </summary>
    
    
      <category term="xcode" scheme="https://duc.ninja/tags/xcode/"/>
    
      <category term="tips" scheme="https://duc.ninja/tags/tips/"/>
    
      <category term="til" scheme="https://duc.ninja/tags/til/"/>
    
  </entry>
  
  <entry>
    <title>LLDB: Po vs E</title>
    <link href="https://duc.ninja/2018/01/252018/po-vs-e/"/>
    <id>https://duc.ninja/2018/01/252018/po-vs-e/</id>
    <published>2018-01-25T14:43:00.000Z</published>
    <updated>2019-11-02T05:56:37.693Z</updated>
    
    <content type="html"><![CDATA[<p>For the longest time I just used “po” in lldb to examine objects but “e” just adds a whole new level to debugging !<br><br></p><a id="more"></a><p><img src="/assets/images/po-vs-e.jpg" alt></p><p>Source: @caro</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;For the longest time I just used “po” in lldb to examine objects but “e” just adds a whole new level to debugging !&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="xcode" scheme="https://duc.ninja/tags/xcode/"/>
    
      <category term="tips" scheme="https://duc.ninja/tags/tips/"/>
    
      <category term="ios" scheme="https://duc.ninja/tags/ios/"/>
    
      <category term="lldb" scheme="https://duc.ninja/tags/lldb/"/>
    
  </entry>
  
  <entry>
    <title>Shortcut to Run a Test Case or Run Whole Test Case</title>
    <link href="https://duc.ninja/2018/01/252018/run-test-case/"/>
    <id>https://duc.ninja/2018/01/252018/run-test-case/</id>
    <published>2018-01-25T14:43:00.000Z</published>
    <updated>2019-11-02T05:56:37.693Z</updated>
    
    <content type="html"><![CDATA[<p> <code>⌃⌥⌘U</code> shortcut does different things depending on the current cursor location:</p><ul><li>inside a test method: runs this single test method</li><li>inside an <code>XCTestCase</code> subclass but outside of any method: runs all tests in the class</li><li>Run last test case before: <code>⌃⌥⌘G</code><a id="more"></a><img src="/assets/images/run-test-case.jpg" alt></li></ul><p>Source: @arekholko</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;code&gt;⌃⌥⌘U&lt;/code&gt; shortcut does different things depending on the current cursor location:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inside a test method: runs this single test method&lt;/li&gt;
&lt;li&gt;inside an &lt;code&gt;XCTestCase&lt;/code&gt; subclass but outside of any method: runs all tests in the class&lt;/li&gt;
&lt;li&gt;Run last test case before: &lt;code&gt;⌃⌥⌘G&lt;/code&gt;
    
    </summary>
    
    
      <category term="xcode" scheme="https://duc.ninja/tags/xcode/"/>
    
      <category term="tips" scheme="https://duc.ninja/tags/tips/"/>
    
      <category term="ios" scheme="https://duc.ninja/tags/ios/"/>
    
      <category term="testing" scheme="https://duc.ninja/tags/testing/"/>
    
  </entry>
  
  <entry>
    <title>Passing Data Using NotificationCenter in Swift 4</title>
    <link href="https://duc.ninja/2017/11/122017/passing-data-using-notificationcenter-in-swift-4/"/>
    <id>https://duc.ninja/2017/11/122017/passing-data-using-notificationcenter-in-swift-4/</id>
    <published>2017-11-12T15:15:00.000Z</published>
    <updated>2019-11-02T05:56:37.690Z</updated>
    
    <content type="html"><![CDATA[<p>Passing data from one view controller to another view controller using Notification Center is an easy way when compared to <code>delegate protocols</code>.</p><p>Here we need add <code>observer</code> or <code>listeners</code> for getting new data to load. First we need to send data using post notification method.</p><a id="more"></a><h2 id="Sending-Data-Post-Notification"><a href="#Sending-Data-Post-Notification" class="headerlink" title="Sending Data - Post Notification:"></a>Sending Data - Post Notification:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dataToSend = [<span class="string">"name"</span> : <span class="string">"John"</span>, <span class="string">"age"</span> : <span class="number">25</span>] <span class="keyword">as</span> [<span class="built_in">String</span> : Any]</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NotificationCenter<span class="selector-class">.default</span><span class="selector-class">.post</span>(name: NSNotification.Name(rawValue: <span class="string">"newDataToLoad"</span>), <span class="selector-tag">object</span>: dataToSend)</span><br></pre></td></tr></table></figure><p>Before sending data we need to listen for the above notification using  <code>NSNotification.Name</code></p><h2 id="Data-Receiving-Add-observer"><a href="#Data-Receiving-Add-observer" class="headerlink" title="Data Receiving - Add observer:"></a>Data Receiving - Add observer:</h2><p>Add the following code for <code>listening</code> to new data:</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">NotificationCenter</span><span class="selector-class">.default</span><span class="selector-class">.addObserver</span>(self, <span class="attribute">selector</span>: #selector(notificationRecevied(<span class="attribute">notification</span>:)), <span class="attribute">name</span>: NSNotification.Name(<span class="attribute">rawValue</span>: <span class="string">"newDataToLoad"</span>), <span class="attribute">object</span>: nil)</span><br></pre></td></tr></table></figure><p>Add the following method to retrieve data:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">notificationRecevied</span><span class="params">(notification: Notification)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data = notification.object</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Remove-Observer"><a href="#Remove-Observer" class="headerlink" title="Remove Observer:"></a>Remove Observer:</h2><p>Don’t forgot to remove observer on<code>viewWillDisappear()</code>as follow:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NotificationCenter<span class="selector-class">.default</span><span class="selector-class">.removeObserver</span>(self, name: NSNotification.Name(rawValue: <span class="string">"newDataToLoad"</span>), <span class="selector-tag">object</span>: nil)</span><br></pre></td></tr></table></figure><p>Source: iosrevisited</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Passing data from one view controller to another view controller using Notification Center is an easy way when compared to &lt;code&gt;delegate protocols&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here we need add &lt;code&gt;observer&lt;/code&gt; or &lt;code&gt;listeners&lt;/code&gt; for getting new data to load. First we need to send data using post notification method.&lt;/p&gt;
    
    </summary>
    
    
      <category term="tips" scheme="https://duc.ninja/tags/tips/"/>
    
      <category term="ios" scheme="https://duc.ninja/tags/ios/"/>
    
      <category term="swift" scheme="https://duc.ninja/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Save Custom Objects Into UserDefaults(Swift 4)</title>
    <link href="https://duc.ninja/2017/11/072017/save-custom-object-into-userdefaults/"/>
    <id>https://duc.ninja/2017/11/072017/save-custom-object-into-userdefaults/</id>
    <published>2017-11-07T14:47:00.000Z</published>
    <updated>2019-11-02T05:56:37.690Z</updated>
    
    <content type="html"><![CDATA[<p>We have many ways to store and retrieve persistent data in iOS but let try to store a custom object into <code>UserDefaults</code> with <code>Codable</code> in Swift 4.</p><a id="more"></a><p>We have a custom object like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">User</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And now, let define a object:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = <span class="type">User</span>(id: <span class="string">"abc123"</span>, name: <span class="string">"Tim can Cook"</span>, age: <span class="number">13</span>)</span><br></pre></td></tr></table></figure><p>Finally, we have to encode it using <code>JSONEncoder</code> then it can be persist into UserDefaults.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> kUser = <span class="string">"kUser"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> encoded = <span class="keyword">try</span>? <span class="type">JSONEncoder</span>().encode(user) &#123;</span><br><span class="line">    <span class="type">UserDefaults</span>.standard.<span class="keyword">set</span>(encoded, forKey: <span class="string">"kUser"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> userData = <span class="type">UserDefaults</span>.standard.data(forKey: <span class="string">"kUser"</span>),</span><br><span class="line">    <span class="keyword">let</span> user = <span class="keyword">try</span>? <span class="type">JSONDecoder</span>().decode(<span class="type">User</span>.<span class="keyword">self</span>, from: userData) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dump</span>(user)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now you can see the log on the console:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">▿ __lldb_expr_10.User</span><br><span class="line">  - id: <span class="string">"ABCD1234"</span></span><br><span class="line">  - name: <span class="string">"Tim can Cook"</span></span><br><span class="line">  - age: 13</span><br></pre></td></tr></table></figure><p>That’s it! You can download the  <a href="https://github.com/ducito/CustomObjectWithUserDefaults/archive/master.zip" target="_blank" rel="noopener"><strong>final playground file here.</strong></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We have many ways to store and retrieve persistent data in iOS but let try to store a custom object into &lt;code&gt;UserDefaults&lt;/code&gt; with &lt;code&gt;Codable&lt;/code&gt; in Swift 4.&lt;/p&gt;
    
    </summary>
    
    
      <category term="tips" scheme="https://duc.ninja/tags/tips/"/>
    
      <category term="ios" scheme="https://duc.ninja/tags/ios/"/>
    
      <category term="swift" scheme="https://duc.ninja/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Easy XIB and Storyboard Localization</title>
    <link href="https://duc.ninja/2017/11/052017/easy-xib-and-storyboard-localization/"/>
    <id>https://duc.ninja/2017/11/052017/easy-xib-and-storyboard-localization/</id>
    <published>2017-11-05T15:30:00.000Z</published>
    <updated>2019-11-02T05:56:37.689Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn-images-1.medium.com/max/1600/1*oFXeXtJ2LM8uB7prmtAZmw.jpeg" alt="img">Photo by <a href="https://unsplash.com/photos/jUSu0686zDM" target="_blank" rel="noopener">freestocks.org</a> on <a href="https://unsplash.com" target="_blank" rel="noopener">Unsplash</a></p><p>Localization is a key part of an application. In order to make it easy, maintainable and extensible it deserves a bit of effort and care.</p><a id="more"></a><p>But for iOS graphic interfaces made with Interface Builder, it becomes a bit tricky to accomplish those goals.</p><h3 id="Storyboard-localization-what-the-heck"><a href="#Storyboard-localization-what-the-heck" class="headerlink" title="Storyboard localization: what the heck!"></a>Storyboard localization: what the heck!</h3><p>Say we have a Storyboard with an interface like this:</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*9hTd6a-GI-p5IJiTtcwfqw.png" alt="img"></p><p>There are three controls suitable to be localized: the “Title” label, the “Information” label and the “Buy” button. We want to localize the UI in English and Spanish.</p><p>The classic strategy is to have two <code>Main.storyboard</code> files, one in a <code>en.lproj</code>folder and the other in a <code>es.lproj</code> folder. That sounds simple but it leads to a huge problem of maintenance as some change in the UI requires changing all the Storyboards. Imagine an app localized in more than two languages.</p><p>The second option is to tick “English — Localizable Strings” in the localization pane in the File inspector of the Storyboard; it creates a <code>strings</code> file called <code>Main.strings</code> located in the folder <code>en.lproj</code>. This file looks like this:</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*AaeTIl9OwM9jR6VKwq6XOQ.png" alt="img"></p><p>It has the usual syntax of a <code>strings</code> file, but the first thing you may notice is how the controls are identified. We have names like <code>Axl-vE-Aj2</code> for the “Title” label, or <code>cY0-hb-qiL</code> for the “Buy” button.</p><p>Well, it is a bit confusing, but we can move on and localize the UI to Spanish. We create the new Spanish Localization in the Configuration pane of the project and automatically Xcode creates a new <code>Main.strings</code> file inside the <code>es.lproj</code> folder. Let’s open that file and translate the texts to Spanish:</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*AJMl0WFOOGvPRPWPTTKndQ.png" alt="img"></p><p>It sounds pretty straightforward, but this workflow has a bunch of problems:</p><ul><li>If you change something in IB, the <code>strings</code> files are not updated. You have to use <em>ibtool</em> or <em>AppleGlot</em> to get it done. More about this <a href="https://ayeohyes.wordpress.com/2015/07/24/localizing-storyboards-and-xibs/" target="_blank" rel="noopener">here</a>.</li><li>The names of the controls are not in a human readable manner, not even if we have filled the “Label” property of the control (Identity Inspector &gt; Document).</li><li>There is no possibility to reuse localizations from other <code>.strings</code> files, or at least I did not find the way to refer to them.<br>For example, given the usual <code>Localizable.strings</code> file, to make a reference with something like <code>cY0-hb-qiL.normalTitle = &quot;${to_buy}&quot;</code>.</li><li>We have localizations dispersed in more than one file: one for the localizations in code (<code>Localizable.strings</code>) and another to localize IB files (<code>Main.strings</code>).</li><li>Probably, we’ll have translations repeated in both files if we need to use it in code and IB.</li></ul><p>So I give a thought to this, and after a couple of searches, I arrived to a <a href="https://stackoverflow.com/a/21443515/191059" target="_blank" rel="noopener">Stack Overflow answer</a> that pointed to a perfect solution to this: to use the *<em>User Defined Runtime Attributes *</em>that we can find at the Identity Inspector.</p><p>Let’s see how to achieve it.</p><hr><h3 id="Step-1-Localizable-protocols"><a href="#Step-1-Localizable-protocols" class="headerlink" title="Step 1. Localizable protocols"></a>Step 1. Localizable protocols</h3><p>The first step is to create a couple of very simple protocols.</p><p><code>Localizable</code>, that we will use to get a localized string from another string used as the key:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Localizable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> localized: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">extension <span class="built_in">String</span>: Localizable &#123;</span><br><span class="line">    <span class="built_in">var</span> localized: <span class="built_in">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> NSLocalizedString(<span class="built_in">self</span>, comment: <span class="string">""</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And <code>XIBLocalizable</code>, that we will use to localize controls from an IB file:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">XIBLocalizable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xibLocKey: <span class="type">String?</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we have to implement this interface in those controls suitable to be localized:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UILabel</span>: <span class="title">XIBLocalizable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@IBInspectable</span> <span class="keyword">var</span> xibLocKey: <span class="type">String?</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">        <span class="keyword">set</span>(key) &#123;</span><br><span class="line">            text = key?.localized</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIButton</span>: <span class="title">XIBLocalizable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@IBInspectable</span> <span class="keyword">var</span> xibLocKey: <span class="type">String?</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">        <span class="keyword">set</span>(key) &#123;</span><br><span class="line">            setTitle(key?.localized, <span class="keyword">for</span>: .normal)</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>NOTE</strong>: <code>get</code> is irrelevant in this case, we are not going to need the name of the key used in the <code>Localizable.strings</code> file anywhere.</p><p><strong>NOTE 2</strong>: in order to make this run on Swift 4 you have to add <code>@IBInspectable</code>to the <code>xibLocKey</code> implementation, else it will not work:</p><blockquote><p>Failed to set (xibLocKey) user defined inspected property on (UIButton): [&lt;UIButton 0x7fb24a50dbc0&gt; setValue:forUndefinedKey:]: this class is not key value coding-compliant for the key xibLocKey.</p></blockquote><h3 id="Step-2-Set-the-localization-key-in-IB"><a href="#Step-2-Set-the-localization-key-in-IB" class="headerlink" title="Step 2. Set the localization key in IB"></a>Step 2. Set the localization key in IB</h3><p>The second step is to set, for each control, its associated localization key. We have two <code>Localizable.strings</code> files.</p><p><code>en.lproj</code> file:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">“title” = “Title”<span class="comment">;</span></span><br><span class="line">“info” = “Information”<span class="comment">;</span></span><br><span class="line">“to_buy” = “Buy”<span class="comment">;</span></span><br></pre></td></tr></table></figure><p><code>es.lproj</code> file:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"title"</span> = <span class="string">"Título"</span><span class="comment">;</span></span><br><span class="line"><span class="string">"info"</span> = <span class="string">"Información"</span><span class="comment">;</span></span><br><span class="line"><span class="string">"to_buy"</span> = <span class="string">"Comprar"</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><p>Now it is time to set these keys in IB. To do that we have to:</p><ol><li>Select the control to be localized, for example the “Title” label.</li><li>Go to the Identity Inspector and add a new value to the <em>User Defined Runtime Attributes</em>. Fill it with <code>Key Path = xibLocKey</code> , <code>Type = String</code> and <code>Value = title</code> . It may look like this:</li></ol><p><img src="https://cdn-images-1.medium.com/max/1600/1*lTVg9pCO35OzgY1oObi8Wg.png" alt="img"></p><p>As our properties are <code>@IBInspectable</code> you can also fill the <code>xibLocKey</code> in the <em>Attributes Inspector:</em></p><p><img src="https://cdn-images-1.medium.com/max/1600/1*ZDtR1ogbCU3zmUBmCZQ3YA.png" alt="img"></p><p>That’s all! Repeat these steps with every control you want to localize and run the app to test it.</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*YlzFrh9t24GWIFWcDgvQPQ.png" alt="img">Left: iPhone 6 in Spanish; Right: iPhone SE in English</p><hr><p>This is a very clever and simple solution, and it avoids two important flaws we will encounter in other solutions:</p><ol><li>It is a great way to get rid of complicated workflows involving external tools.</li><li>It also encourages <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" target="_blank" rel="noopener">DRY principle</a> to use localizations in code and Interface Builder without having the same translation in two different files.</li></ol><p>You can find a example project in my <a href="https://github.com/emenegro/xib-localization" target="_blank" rel="noopener">GitHub</a>.</p><p>Source: Mario Negro</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1600/1*oFXeXtJ2LM8uB7prmtAZmw.jpeg&quot; alt=&quot;img&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/photos/jUSu0686zDM&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;freestocks.org&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Localization is a key part of an application. In order to make it easy, maintainable and extensible it deserves a bit of effort and care.&lt;/p&gt;
    
    </summary>
    
    
      <category term="xcode" scheme="https://duc.ninja/tags/xcode/"/>
    
      <category term="tips" scheme="https://duc.ninja/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>Dependency Injection Examples With Swift 4</title>
    <link href="https://duc.ninja/2017/11/052017/dependency-injection-swift-4/"/>
    <id>https://duc.ninja/2017/11/052017/dependency-injection-swift-4/</id>
    <published>2017-11-05T14:16:00.000Z</published>
    <updated>2019-11-02T05:56:37.688Z</updated>
    
    <content type="html"><![CDATA[<p>In <a href="https://en.wikipedia.org/wiki/Software_engineering" target="_blank" rel="noopener">software engineering</a>, <strong>dependency injection</strong> is a technique whereby one object supplies the dependencies of another object. A dependency is an object that can be used (a <a href="https://en.wikipedia.org/wiki/Service_(systems_architecture)" target="_blank" rel="noopener">service</a>). An injection is the passing of a dependency to a dependent object (a <a href="https://en.wikipedia.org/wiki/Client_(computing)" target="_blank" rel="noopener">client</a>) that would use it.</p><a id="more"></a><p>The service is made part of the client’s <a href="https://en.wikipedia.org/wiki/State_(computer_science)" target="_blank" rel="noopener">state</a>.<a href="https://en.wikipedia.org/wiki/Dependency_injection#cite_note-JamesShore-1" target="_blank" rel="noopener">[1]</a> Passing the service to the client, rather than allowing a client to build or <a href="https://en.wikipedia.org/wiki/Service_locator_pattern" target="_blank" rel="noopener">find the service</a>, is the fundamental requirement of the pattern. - <a href="https://en.wikipedia.org/wiki/Dependency_injection" target="_blank" rel="noopener">Wikipedia</a>.</p><h3 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR."></a>TL;DR.</h3><p><img src="/assets/images/di.png" alt></p><h3 id="Initializer-injection"><a href="#Initializer-injection" class="headerlink" title="Initializer injection"></a>Initializer injection</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Serializer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">serialize</span><span class="params">(data: <span class="keyword">Any</span>)</span></span> -&gt; <span class="type">Data?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestSerializer</span>: <span class="title">Serializer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">serialize</span><span class="params">(data: <span class="keyword">Any</span>)</span></span> -&gt; <span class="type">Data?</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> serializer: <span class="type">Serializer?</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(serializer: <span class="type">Serializer</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.serializer = serializer</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> serializer = <span class="type">RequestSerializer</span>()</span><br><span class="line"><span class="comment">// DI</span></span><br><span class="line"><span class="keyword">let</span> dataManager = <span class="type">DataManager</span>(serializer: serializer)</span><br></pre></td></tr></table></figure><h3 id="Property-injection"><a href="#Property-injection" class="headerlink" title="Property injection"></a>Property injection</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Serializer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">serialize</span><span class="params">(data: <span class="keyword">Any</span>)</span></span> -&gt; <span class="type">Data?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestSerializer</span>: <span class="title">Serializer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">serialize</span><span class="params">(data: <span class="keyword">Any</span>)</span></span> -&gt; <span class="type">Data?</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> serializer: <span class="type">Serializer?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dataManager = <span class="type">DataManager</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// DI</span></span><br><span class="line">dataManager.serializer = <span class="type">RequestSerializer</span>()</span><br></pre></td></tr></table></figure><h3 id="Method-Injection"><a href="#Method-Injection" class="headerlink" title="Method Injection"></a>Method Injection</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Request</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Serializer</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataManager</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">serializeRequest</span><span class="params">(<span class="number">_</span> request: Request, with serializer: Serializer)</span></span> -&gt; <span class="type">Data?</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In &lt;a href=&quot;https://en.wikipedia.org/wiki/Software_engineering&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;software engineering&lt;/a&gt;, &lt;strong&gt;dependency injection&lt;/strong&gt; is a technique whereby one object supplies the dependencies of another object. A dependency is an object that can be used (a &lt;a href=&quot;https://en.wikipedia.org/wiki/Service_(systems_architecture)&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;service&lt;/a&gt;). An injection is the passing of a dependency to a dependent object (a &lt;a href=&quot;https://en.wikipedia.org/wiki/Client_(computing)&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;client&lt;/a&gt;) that would use it.&lt;/p&gt;
    
    </summary>
    
    
      <category term="tips" scheme="https://duc.ninja/tags/tips/"/>
    
      <category term="til" scheme="https://duc.ninja/tags/til/"/>
    
      <category term="ios" scheme="https://duc.ninja/tags/ios/"/>
    
      <category term="swift" scheme="https://duc.ninja/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Remove Old Simulators</title>
    <link href="https://duc.ninja/2017/11/052017/remove-old-simulators/"/>
    <id>https://duc.ninja/2017/11/052017/remove-old-simulators/</id>
    <published>2017-11-05T04:10:00.000Z</published>
    <updated>2019-11-02T05:56:37.690Z</updated>
    
    <content type="html"><![CDATA[<p>If you are an iOS developer, execute this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xcrun simctl delete unavailable</span><br></pre></td></tr></table></figure><a id="more"></a><p>It removes old simulators Xcode no longer use</p><p>Source: @dev_jac</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If you are an iOS developer, execute this:&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ xcrun simctl delete unavailable&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="xcode" scheme="https://duc.ninja/tags/xcode/"/>
    
      <category term="tips" scheme="https://duc.ninja/tags/tips/"/>
    
      <category term="til" scheme="https://duc.ninja/tags/til/"/>
    
  </entry>
  
  <entry>
    <title>Customizing the File Header Comment and Text Macros</title>
    <link href="https://duc.ninja/2017/11/042017/where-is-idetemplatemacros.plist-file/"/>
    <id>https://duc.ninja/2017/11/042017/where-is-idetemplatemacros.plist-file/</id>
    <published>2017-11-04T16:15:00.000Z</published>
    <updated>2019-11-02T05:56:37.692Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Text-macros"><a href="#Text-macros" class="headerlink" title="Text macros"></a>Text macros</h2><p>Text macros are symbols that are expanded in-place to the specified text. They are used in files and other places in Xcode, such as the header text for a new file or the project name. You can customize existing macros and add your own macros in a project, for all users of a project, or for all of Xcode. Customizing a macro requires two things:</p><a id="more"></a><ul><li><em>A plist named IDETemplateMacros.plist at an appropriate location.</em></li><li><em>An entry in IDETemplateMacros.plist for the text macro.</em></li><li> Xcode looks for the value of a text macro in the following locations and uses the first matching macro:<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Project<span class="built_in"> user </span>data -&gt; Project shared data -&gt; Workspace<span class="built_in"> user </span>data -&gt; Workspace shared data -&gt;<span class="built_in"> User </span>Xcode data</span><br></pre></td></tr></table></figure></li></ul><!-- ![](/assets/images/xcode-file-header-comment.png) --><h3 id="For-a-single-project-and-user"><a href="#For-a-single-project-and-user" class="headerlink" title="For a single project and user:"></a>For a single project and user:</h3><p>  <code>&lt;ProjectName&gt;.xcodeproj/xcuserdata/[username].xcuserdatad/IDETemplateMacros.plist</code></p><h3 id="For-all-team-members-in-a-single-project"><a href="#For-all-team-members-in-a-single-project" class="headerlink" title="For all team members in a single project:"></a>For all team members in a single project:</h3><p>  <code>&lt;ProjectName&gt;.xcodeproj/xcshareddata/IDETemplateMacros.plist</code></p><h3 id="For-all-projects-in-a-workspace-for-a-single-user"><a href="#For-all-projects-in-a-workspace-for-a-single-user" class="headerlink" title="For all projects in a workspace for a single user:"></a>For all projects in a workspace for a single user:</h3><p>  <code>&lt;WorkspaceName&gt;.xcworkspace/xcuserdata/[username].xcuserdatad/IDETemplateMacros.plist</code></p><h3 id="For-all-projects-in-a-workspace-for-all-team-members"><a href="#For-all-projects-in-a-workspace-for-all-team-members" class="headerlink" title="For all projects in a workspace for all team members:"></a>For all projects in a workspace for all team members:</h3><p>  <code>&lt;WorkspaceName&gt;.xcworkspace/xcshareddata/IDETemplateMacros.plist</code></p><h3 id="For-everything-you-work-on-regardless-of-project"><a href="#For-everything-you-work-on-regardless-of-project" class="headerlink" title="For everything you work on, regardless of project:"></a>For everything you work on, regardless of project:</h3><p>  <code>~/Library/Developer/Xcode/UserData/IDETemplateMacros.plist</code></p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  ___FILENAME___</span></span><br><span class="line"><span class="comment">//  ___PACKAGENAME___</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by ___FULLUSERNAME___ on ___DATE___.</span></span><br><span class="line"><span class="comment">//  ___COPYRIGHT___</span></span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure><p><img src="https://help.apple.com/xcode/mac/9.0/index.html?localePath=en.lproj#/dev7fe737ce0" alt="Text macros reference"></p><p>Source: Ole Begemann</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Text-macros&quot;&gt;&lt;a href=&quot;#Text-macros&quot; class=&quot;headerlink&quot; title=&quot;Text macros&quot;&gt;&lt;/a&gt;Text macros&lt;/h2&gt;&lt;p&gt;Text macros are symbols that are expanded in-place to the specified text. They are used in files and other places in Xcode, such as the header text for a new file or the project name. You can customize existing macros and add your own macros in a project, for all users of a project, or for all of Xcode. Customizing a macro requires two things:&lt;/p&gt;
    
    </summary>
    
    
      <category term="xcode" scheme="https://duc.ninja/tags/xcode/"/>
    
      <category term="tips" scheme="https://duc.ninja/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>What the Hell Is Swift 4 Access Control?</title>
    <link href="https://duc.ninja/2017/11/042017/what-the-hell-is-swift-4-access-control/"/>
    <id>https://duc.ninja/2017/11/042017/what-the-hell-is-swift-4-access-control/</id>
    <published>2017-11-04T14:45:00.000Z</published>
    <updated>2019-11-02T05:56:37.691Z</updated>
    
    <content type="html"><![CDATA[<p>In <a href="https://en.wikipedia.org/wiki/Object-oriented_programming" target="_blank" rel="noopener">object-oriented programming languages</a>, <em>access control</em> is a part of the apparatus of achieving <a href="https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)" target="_blank" rel="noopener">encapsulation</a>, one of four fundamentals of object-oriented programming. The goal is to establish a clear separation between interface (visible and accessible parts of the class) and implementation (internal representation and helper methods). - <a href="https://en.wikipedia.org/wiki/Access_control#In_object-oriented_programming" target="_blank" rel="noopener">Wikipedia</a></p><a id="more"></a><h3 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h3><p>In Swift 4 we have <strong>5 access levels</strong> like Swift 3, including <code>open</code>, <code>public</code>,  <code>internal</code>, <code>fileprivate</code> and <code>private</code>, but has some differents.</p><h3 id="Open"><a href="#Open" class="headerlink" title="Open"></a>Open</h3><p>You can access <code>open</code> classes and class members from <strong>any source file</strong> in the defining module or <strong>any module that imports that module</strong>. You can <strong>subclass</strong> an <code>open</code> class or <strong>override</strong> an <code>open</code> class member both within their defining module and <strong>any module</strong> that imports that module.</p><h3 id="Public"><a href="#Public" class="headerlink" title="Public"></a>Public</h3><p><code>public</code> allows the <strong>same access as open</strong> - any source file in any module - but has more restrictive subclassing and overriding. You can only subclass a <code>public</code> class within the same module. A <code>public</code> class member can only be overriden by subclasses in the same module. This is important if you are writing a framework.** If you want a user of that framework to be able to subclass a class or override a method you must make it** <code>open</code>.</p><h3 id="Internal"><a href="#Internal" class="headerlink" title="Internal"></a>Internal</h3><p><code>internal</code> allows use from any source file in the defining module but not from outside that module. This is generally the <strong>default access level</strong>.</p><h3 id="Fileprivate"><a href="#Fileprivate" class="headerlink" title="Fileprivate"></a>Fileprivate</h3><p>Restricts the use of an entity to its defining source file. You typically use fileprivate access to hide the implementation details of a specific piece of functionality when those details are used within an entire file.</p><h3 id="private"><a href="#private" class="headerlink" title="private"></a>private</h3><p>Private access restricts the use of an entity to the enclosing declaration, and to extensions of that declaration that are in the same file.</p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>Open access is the highest (least restrictive) access level and private access is the lowest (most restrictive) access level.</p><p>Useful link:<br><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0169-improve-interaction-between-private-declarations-and-extensions.md" target="_blank" rel="noopener">SE-0169</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In &lt;a href=&quot;https://en.wikipedia.org/wiki/Object-oriented_programming&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;object-oriented programming languages&lt;/a&gt;, &lt;em&gt;access control&lt;/em&gt; is a part of the apparatus of achieving &lt;a href=&quot;https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;encapsulation&lt;/a&gt;, one of four fundamentals of object-oriented programming. The goal is to establish a clear separation between interface (visible and accessible parts of the class) and implementation (internal representation and helper methods). - &lt;a href=&quot;https://en.wikipedia.org/wiki/Access_control#In_object-oriented_programming&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="ios" scheme="https://duc.ninja/tags/ios/"/>
    
      <category term="swift" scheme="https://duc.ninja/tags/swift/"/>
    
  </entry>
  
</feed>
